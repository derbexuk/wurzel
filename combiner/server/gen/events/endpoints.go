// Code generated by goa v3.5.2, DO NOT EDIT.
//
// events endpoints
//
// Command:
// $ goa gen github.com/derbexuk/wurzel/combiner/server/design

package events

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "events" service endpoints.
type Endpoints struct {
	Post              goa.Endpoint
	Show              goa.Endpoint
	TimeSearch        goa.Endpoint
	ListByTimeAndPath goa.Endpoint
	ListByPath        goa.Endpoint
	Update            goa.Endpoint
	Deactivate        goa.Endpoint
	Delete            goa.Endpoint
}

// NewEndpoints wraps the methods of the "events" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Post:              NewPostEndpoint(s),
		Show:              NewShowEndpoint(s),
		TimeSearch:        NewTimeSearchEndpoint(s),
		ListByTimeAndPath: NewListByTimeAndPathEndpoint(s),
		ListByPath:        NewListByPathEndpoint(s),
		Update:            NewUpdateEndpoint(s),
		Deactivate:        NewDeactivateEndpoint(s),
		Delete:            NewDeleteEndpoint(s),
	}
}

// Use applies the given middleware to all the "events" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Post = m(e.Post)
	e.Show = m(e.Show)
	e.TimeSearch = m(e.TimeSearch)
	e.ListByTimeAndPath = m(e.ListByTimeAndPath)
	e.ListByPath = m(e.ListByPath)
	e.Update = m(e.Update)
	e.Deactivate = m(e.Deactivate)
	e.Delete = m(e.Delete)
}

// NewPostEndpoint returns an endpoint function that calls the method "post" of
// service "events".
func NewPostEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PostPayload)
		return nil, s.Post(ctx, p)
	}
}

// NewShowEndpoint returns an endpoint function that calls the method "show" of
// service "events".
func NewShowEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowPayload)
		res, view, err := s.Show(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCspaceEvent(res, view)
		return vres, nil
	}
}

// NewTimeSearchEndpoint returns an endpoint function that calls the method
// "TimeSearch" of service "events".
func NewTimeSearchEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TimeSearchPayload)
		res, view, err := s.TimeSearch(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCspaceEventCollection(res, view)
		return vres, nil
	}
}

// NewListByTimeAndPathEndpoint returns an endpoint function that calls the
// method "ListByTimeAndPath" of service "events".
func NewListByTimeAndPathEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListByTimeAndPathPayload)
		res, view, err := s.ListByTimeAndPath(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCspaceEventCollection(res, view)
		return vres, nil
	}
}

// NewListByPathEndpoint returns an endpoint function that calls the method
// "ListByPath" of service "events".
func NewListByPathEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListByPathPayload)
		res, view, err := s.ListByPath(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCspaceEventCollection(res, view)
		return vres, nil
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "events".
func NewUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdatePayload)
		return nil, s.Update(ctx, p)
	}
}

// NewDeactivateEndpoint returns an endpoint function that calls the method
// "deactivate" of service "events".
func NewDeactivateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeactivatePayload)
		return nil, s.Deactivate(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "events".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeletePayload)
		return nil, s.Delete(ctx, p)
	}
}
