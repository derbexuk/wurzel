// Code generated by goa v3.5.2, DO NOT EDIT.
//
// events client
//
// Command:
// $ goa gen github.com/derbexuk/poieventservice/server/design

package events

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "events" service client.
type Client struct {
	PostEndpoint              goa.Endpoint
	ShowEndpoint              goa.Endpoint
	TimeSearchEndpoint        goa.Endpoint
	ListByTimeAndPathEndpoint goa.Endpoint
	ListByPathEndpoint        goa.Endpoint
	UpdateEndpoint            goa.Endpoint
	DeactivateEndpoint        goa.Endpoint
	DeleteEndpoint            goa.Endpoint
}

// NewClient initializes a "events" service client given the endpoints.
func NewClient(post, show, timeSearch, listByTimeAndPath, listByPath, update, deactivate, delete_ goa.Endpoint) *Client {
	return &Client{
		PostEndpoint:              post,
		ShowEndpoint:              show,
		TimeSearchEndpoint:        timeSearch,
		ListByTimeAndPathEndpoint: listByTimeAndPath,
		ListByPathEndpoint:        listByPath,
		UpdateEndpoint:            update,
		DeactivateEndpoint:        deactivate,
		DeleteEndpoint:            delete_,
	}
}

// Post calls the "post" endpoint of the "events" service.
func (c *Client) Post(ctx context.Context, p *PostPayload) (err error) {
	_, err = c.PostEndpoint(ctx, p)
	return
}

// Show calls the "show" endpoint of the "events" service.
func (c *Client) Show(ctx context.Context, p *ShowPayload) (res *CspaceEvent, err error) {
	var ires interface{}
	ires, err = c.ShowEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CspaceEvent), nil
}

// TimeSearch calls the "TimeSearch" endpoint of the "events" service.
func (c *Client) TimeSearch(ctx context.Context, p *TimeSearchPayload) (res CspaceEventCollection, err error) {
	var ires interface{}
	ires, err = c.TimeSearchEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(CspaceEventCollection), nil
}

// ListByTimeAndPath calls the "ListByTimeAndPath" endpoint of the "events"
// service.
func (c *Client) ListByTimeAndPath(ctx context.Context, p *ListByTimeAndPathPayload) (res CspaceEventCollection, err error) {
	var ires interface{}
	ires, err = c.ListByTimeAndPathEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(CspaceEventCollection), nil
}

// ListByPath calls the "ListByPath" endpoint of the "events" service.
func (c *Client) ListByPath(ctx context.Context, p *ListByPathPayload) (res CspaceEventCollection, err error) {
	var ires interface{}
	ires, err = c.ListByPathEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(CspaceEventCollection), nil
}

// Update calls the "update" endpoint of the "events" service.
func (c *Client) Update(ctx context.Context, p *UpdatePayload) (err error) {
	_, err = c.UpdateEndpoint(ctx, p)
	return
}

// Deactivate calls the "deactivate" endpoint of the "events" service.
func (c *Client) Deactivate(ctx context.Context, p *DeactivatePayload) (err error) {
	_, err = c.DeactivateEndpoint(ctx, p)
	return
}

// Delete calls the "delete" endpoint of the "events" service.
func (c *Client) Delete(ctx context.Context, p *DeletePayload) (err error) {
	_, err = c.DeleteEndpoint(ctx, p)
	return
}
