// Code generated by goa v3.5.2, DO NOT EDIT.
//
// events service
//
// Command:
// $ goa gen github.com/derbexuk/wurzel/combiner/server/design

package events

import (
	"context"

	eventsviews "github.com/derbexuk/wurzel/combiner/server/gen/events/views"
	goa "goa.design/goa/v3/pkg"
)

// Service is the events service interface.
type Service interface {
	// Add an event
	Post(context.Context, *PostPayload) (err error)
	// Show an event in full
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "summary"
	Show(context.Context, *ShowPayload) (res *CspaceEvent, view string, err error)
	// Show events according to search values
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "summary"
	TimeSearch(context.Context, *TimeSearchPayload) (res CspaceEventCollection, view string, err error)
	// List Events for a path
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "summary"
	ListByTimeAndPath(context.Context, *ListByTimeAndPathPayload) (res CspaceEventCollection, view string, err error)
	// List Events for a path
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "summary"
	ListByPath(context.Context, *ListByPathPayload) (res CspaceEventCollection, view string, err error)
	// Update an event
	Update(context.Context, *UpdatePayload) (err error)
	// Delete an Event
	Deactivate(context.Context, *DeactivatePayload) (err error)
	// Delete an Event
	Delete(context.Context, *DeletePayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "events"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [8]string{"post", "show", "TimeSearch", "ListByTimeAndPath", "ListByPath", "update", "deactivate", "delete"}

// PostPayload is the payload type of the events service post method.
type PostPayload struct {
	// the path of the Event
	Path   string
	Events []*EventPayload
}

// ShowPayload is the payload type of the events service show method.
type ShowPayload struct {
	// the path of the Event
	Path string
}

// CspaceEvent is the result type of the events service show method.
type CspaceEvent struct {
	// ID of Event
	ID string
	// Event title/name
	Title       string
	Description *string
	Deactivated *bool
	Start       string
	End         *string
	// Hash of application specific properties
	Properties map[string]string
	// refs
	Refs []string
	Path *string
}

// TimeSearchPayload is the payload type of the events service TimeSearch
// method.
type TimeSearchPayload struct {
	// Start
	Start string
	// End
	End *string
	// Order
	Order *string
	// Limit
	Limit *int
	// Path
	Path string
}

// CspaceEventCollection is the result type of the events service TimeSearch
// method.
type CspaceEventCollection []*CspaceEvent

// ListByTimeAndPathPayload is the payload type of the events service
// ListByTimeAndPath method.
type ListByTimeAndPathPayload struct {
	// Start
	Start string
	// End
	End *string
	// Path
	Path string
}

// ListByPathPayload is the payload type of the events service ListByPath
// method.
type ListByPathPayload struct {
	// Path
	Path string
}

// UpdatePayload is the payload type of the events service update method.
type UpdatePayload struct {
	// Path
	Path  string
	Event *EventPayload
}

// DeactivatePayload is the payload type of the events service deactivate
// method.
type DeactivatePayload struct {
	// Path
	Path string
}

// DeletePayload is the payload type of the events service delete method.
type DeletePayload struct {
	// Path
	Path string
}

type EventPayload struct {
	// ID of Event
	ID string
	// Event title/name
	Title       string
	Description *string
	Deactivated *bool
	Start       string
	End         *string
	// Hash of application specific properties
	Properties map[string]string
	// references
	Refs []string
	Path *string
}

// MakeBadReq builds a goa.ServiceError from an error.
func MakeBadReq(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_req",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnAuth builds a goa.ServiceError from an error.
func MakeUnAuth(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "un_auth",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
		Fault:   true,
	}
}

// NewCspaceEvent initializes result type CspaceEvent from viewed result type
// CspaceEvent.
func NewCspaceEvent(vres *eventsviews.CspaceEvent) *CspaceEvent {
	var res *CspaceEvent
	switch vres.View {
	case "default", "":
		res = newCspaceEvent(vres.Projected)
	case "summary":
		res = newCspaceEventSummary(vres.Projected)
	}
	return res
}

// NewViewedCspaceEvent initializes viewed result type CspaceEvent from result
// type CspaceEvent using the given view.
func NewViewedCspaceEvent(res *CspaceEvent, view string) *eventsviews.CspaceEvent {
	var vres *eventsviews.CspaceEvent
	switch view {
	case "default", "":
		p := newCspaceEventView(res)
		vres = &eventsviews.CspaceEvent{Projected: p, View: "default"}
	case "summary":
		p := newCspaceEventViewSummary(res)
		vres = &eventsviews.CspaceEvent{Projected: p, View: "summary"}
	}
	return vres
}

// NewCspaceEventCollection initializes result type CspaceEventCollection from
// viewed result type CspaceEventCollection.
func NewCspaceEventCollection(vres eventsviews.CspaceEventCollection) CspaceEventCollection {
	var res CspaceEventCollection
	switch vres.View {
	case "default", "":
		res = newCspaceEventCollection(vres.Projected)
	case "summary":
		res = newCspaceEventCollectionSummary(vres.Projected)
	}
	return res
}

// NewViewedCspaceEventCollection initializes viewed result type
// CspaceEventCollection from result type CspaceEventCollection using the given
// view.
func NewViewedCspaceEventCollection(res CspaceEventCollection, view string) eventsviews.CspaceEventCollection {
	var vres eventsviews.CspaceEventCollection
	switch view {
	case "default", "":
		p := newCspaceEventCollectionView(res)
		vres = eventsviews.CspaceEventCollection{Projected: p, View: "default"}
	case "summary":
		p := newCspaceEventCollectionViewSummary(res)
		vres = eventsviews.CspaceEventCollection{Projected: p, View: "summary"}
	}
	return vres
}

// newCspaceEvent converts projected type CspaceEvent to service type
// CspaceEvent.
func newCspaceEvent(vres *eventsviews.CspaceEventView) *CspaceEvent {
	res := &CspaceEvent{
		Description: vres.Description,
		Deactivated: vres.Deactivated,
		End:         vres.End,
		Path:        vres.Path,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Start != nil {
		res.Start = *vres.Start
	}
	if vres.Properties != nil {
		res.Properties = make(map[string]string, len(vres.Properties))
		for key, val := range vres.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if vres.Refs != nil {
		res.Refs = make([]string, len(vres.Refs))
		for i, val := range vres.Refs {
			res.Refs[i] = val
		}
	}
	return res
}

// newCspaceEventSummary converts projected type CspaceEvent to service type
// CspaceEvent.
func newCspaceEventSummary(vres *eventsviews.CspaceEventView) *CspaceEvent {
	res := &CspaceEvent{
		End:  vres.End,
		Path: vres.Path,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Start != nil {
		res.Start = *vres.Start
	}
	return res
}

// newCspaceEventView projects result type CspaceEvent to projected type
// CspaceEventView using the "default" view.
func newCspaceEventView(res *CspaceEvent) *eventsviews.CspaceEventView {
	vres := &eventsviews.CspaceEventView{
		ID:          &res.ID,
		Title:       &res.Title,
		Description: res.Description,
		Deactivated: res.Deactivated,
		Start:       &res.Start,
		End:         res.End,
		Path:        res.Path,
	}
	if res.Properties != nil {
		vres.Properties = make(map[string]string, len(res.Properties))
		for key, val := range res.Properties {
			tk := key
			tv := val
			vres.Properties[tk] = tv
		}
	}
	if res.Refs != nil {
		vres.Refs = make([]string, len(res.Refs))
		for i, val := range res.Refs {
			vres.Refs[i] = val
		}
	}
	return vres
}

// newCspaceEventViewSummary projects result type CspaceEvent to projected type
// CspaceEventView using the "summary" view.
func newCspaceEventViewSummary(res *CspaceEvent) *eventsviews.CspaceEventView {
	vres := &eventsviews.CspaceEventView{
		ID:    &res.ID,
		Title: &res.Title,
		Start: &res.Start,
		End:   res.End,
		Path:  res.Path,
	}
	return vres
}

// newCspaceEventCollection converts projected type CspaceEventCollection to
// service type CspaceEventCollection.
func newCspaceEventCollection(vres eventsviews.CspaceEventCollectionView) CspaceEventCollection {
	res := make(CspaceEventCollection, len(vres))
	for i, n := range vres {
		res[i] = newCspaceEvent(n)
	}
	return res
}

// newCspaceEventCollectionSummary converts projected type
// CspaceEventCollection to service type CspaceEventCollection.
func newCspaceEventCollectionSummary(vres eventsviews.CspaceEventCollectionView) CspaceEventCollection {
	res := make(CspaceEventCollection, len(vres))
	for i, n := range vres {
		res[i] = newCspaceEventSummary(n)
	}
	return res
}

// newCspaceEventCollectionView projects result type CspaceEventCollection to
// projected type CspaceEventCollectionView using the "default" view.
func newCspaceEventCollectionView(res CspaceEventCollection) eventsviews.CspaceEventCollectionView {
	vres := make(eventsviews.CspaceEventCollectionView, len(res))
	for i, n := range res {
		vres[i] = newCspaceEventView(n)
	}
	return vres
}

// newCspaceEventCollectionViewSummary projects result type
// CspaceEventCollection to projected type CspaceEventCollectionView using the
// "summary" view.
func newCspaceEventCollectionViewSummary(res CspaceEventCollection) eventsviews.CspaceEventCollectionView {
	vres := make(eventsviews.CspaceEventCollectionView, len(res))
	for i, n := range res {
		vres[i] = newCspaceEventViewSummary(n)
	}
	return vres
}
