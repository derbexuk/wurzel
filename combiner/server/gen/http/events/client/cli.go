// Code generated by goa v3.5.2, DO NOT EDIT.
//
// events HTTP client CLI support package
//
// Command:
// $ goa gen github.com/derbexuk/poieventservice/server/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	events "github.com/derbexuk/poieventservice/server/gen/events"
	goa "goa.design/goa/v3/pkg"
)

// BuildPostPayload builds the payload for the events post endpoint from CLI
// flags.
func BuildPostPayload(eventsPostBody string, eventsPostPath string) (*events.PostPayload, error) {
	var err error
	var body PostRequestBody
	{
		err = json.Unmarshal([]byte(eventsPostBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"events\": [\n         {\n            \"deactivated\": true,\n            \"description\": \"Quidem est quaerat.\",\n            \"end\": \"2017-08-22T12:06:30.696Z\",\n            \"id\": \"59b287534defd02dace3671b\",\n            \"path\": \"Voluptas quis velit sed ducimus laboriosam.\",\n            \"properties\": {\n               \"Maxime possimus porro temporibus consequuntur tempore.\": \"Sit eos sit tempora nihil ipsum.\",\n               \"Voluptatem et vero blanditiis non iste.\": \"Et pariatur fuga.\"\n            },\n            \"refs\": [\n               \"Molestiae optio hic sequi ea dolores tempora.\",\n               \"Consequuntur perspiciatis ipsam accusamus natus.\",\n               \"Debitis esse consequatur quo nesciunt.\"\n            ],\n            \"start\": \"2017-08-22T12:06:30.696Z\",\n            \"title\": \"Sed corporis qui.\"\n         },\n         {\n            \"deactivated\": true,\n            \"description\": \"Quidem est quaerat.\",\n            \"end\": \"2017-08-22T12:06:30.696Z\",\n            \"id\": \"59b287534defd02dace3671b\",\n            \"path\": \"Voluptas quis velit sed ducimus laboriosam.\",\n            \"properties\": {\n               \"Maxime possimus porro temporibus consequuntur tempore.\": \"Sit eos sit tempora nihil ipsum.\",\n               \"Voluptatem et vero blanditiis non iste.\": \"Et pariatur fuga.\"\n            },\n            \"refs\": [\n               \"Molestiae optio hic sequi ea dolores tempora.\",\n               \"Consequuntur perspiciatis ipsam accusamus natus.\",\n               \"Debitis esse consequatur quo nesciunt.\"\n            ],\n            \"start\": \"2017-08-22T12:06:30.696Z\",\n            \"title\": \"Sed corporis qui.\"\n         }\n      ]\n   }'")
		}
		for _, e := range body.Events {
			if e != nil {
				if err2 := ValidateEventPayloadRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var path string
	{
		path = eventsPostPath
	}
	v := &events.PostPayload{}
	if body.Events != nil {
		v.Events = make([]*events.EventPayload, len(body.Events))
		for i, val := range body.Events {
			v.Events[i] = marshalEventPayloadRequestBodyToEventsEventPayload(val)
		}
	}
	v.Path = path

	return v, nil
}

// BuildShowPayload builds the payload for the events show endpoint from CLI
// flags.
func BuildShowPayload(eventsShowPath string) (*events.ShowPayload, error) {
	var path string
	{
		path = eventsShowPath
	}
	v := &events.ShowPayload{}
	v.Path = path

	return v, nil
}

// BuildTimeSearchPayload builds the payload for the events TimeSearch endpoint
// from CLI flags.
func BuildTimeSearchPayload(eventsTimeSearchStart string, eventsTimeSearchEnd string, eventsTimeSearchOrder string, eventsTimeSearchLimit string, eventsTimeSearchPath string) (*events.TimeSearchPayload, error) {
	var err error
	var start string
	{
		start = eventsTimeSearchStart
		err = goa.MergeErrors(err, goa.ValidateFormat("start", start, goa.FormatDateTime))

		if err != nil {
			return nil, err
		}
	}
	var end string
	{
		end = eventsTimeSearchEnd
		err = goa.MergeErrors(err, goa.ValidateFormat("end", end, goa.FormatDateTime))

		if err != nil {
			return nil, err
		}
	}
	var order string
	{
		order = eventsTimeSearchOrder
	}
	var limit int
	{
		var v int64
		v, err = strconv.ParseInt(eventsTimeSearchLimit, 10, 64)
		limit = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for limit, must be INT")
		}
	}
	var path string
	{
		path = eventsTimeSearchPath
	}
	v := &events.TimeSearchPayload{}
	v.Start = start
	v.End = &end
	v.Order = &order
	v.Limit = &limit
	v.Path = path

	return v, nil
}

// BuildListByTimeAndPathPayload builds the payload for the events
// ListByTimeAndPath endpoint from CLI flags.
func BuildListByTimeAndPathPayload(eventsListByTimeAndPathStart string, eventsListByTimeAndPathEnd string, eventsListByTimeAndPathPath string) (*events.ListByTimeAndPathPayload, error) {
	var err error
	var start string
	{
		start = eventsListByTimeAndPathStart
		err = goa.MergeErrors(err, goa.ValidateFormat("start", start, goa.FormatDateTime))

		if err != nil {
			return nil, err
		}
	}
	var end string
	{
		end = eventsListByTimeAndPathEnd
		err = goa.MergeErrors(err, goa.ValidateFormat("end", end, goa.FormatDateTime))

		if err != nil {
			return nil, err
		}
	}
	var path string
	{
		path = eventsListByTimeAndPathPath
	}
	v := &events.ListByTimeAndPathPayload{}
	v.Start = start
	v.End = &end
	v.Path = path

	return v, nil
}

// BuildListByPathPayload builds the payload for the events ListByPath endpoint
// from CLI flags.
func BuildListByPathPayload(eventsListByPathPath string) (*events.ListByPathPayload, error) {
	var path string
	{
		path = eventsListByPathPath
	}
	v := &events.ListByPathPayload{}
	v.Path = path

	return v, nil
}

// BuildUpdatePayload builds the payload for the events update endpoint from
// CLI flags.
func BuildUpdatePayload(eventsUpdateBody string, eventsUpdatePath string) (*events.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(eventsUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"event\": {\n         \"deactivated\": true,\n         \"description\": \"Quidem est quaerat.\",\n         \"end\": \"2017-08-22T12:06:30.696Z\",\n         \"id\": \"59b287534defd02dace3671b\",\n         \"path\": \"Voluptas quis velit sed ducimus laboriosam.\",\n         \"properties\": {\n            \"Maxime possimus porro temporibus consequuntur tempore.\": \"Sit eos sit tempora nihil ipsum.\",\n            \"Voluptatem et vero blanditiis non iste.\": \"Et pariatur fuga.\"\n         },\n         \"refs\": [\n            \"Molestiae optio hic sequi ea dolores tempora.\",\n            \"Consequuntur perspiciatis ipsam accusamus natus.\",\n            \"Debitis esse consequatur quo nesciunt.\"\n         ],\n         \"start\": \"2017-08-22T12:06:30.696Z\",\n         \"title\": \"Sed corporis qui.\"\n      }\n   }'")
		}
		if body.Event != nil {
			if err2 := ValidateEventPayloadRequestBody(body.Event); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var path string
	{
		path = eventsUpdatePath
	}
	v := &events.UpdatePayload{}
	if body.Event != nil {
		v.Event = marshalEventPayloadRequestBodyToEventsEventPayload(body.Event)
	}
	v.Path = path

	return v, nil
}

// BuildDeactivatePayload builds the payload for the events deactivate endpoint
// from CLI flags.
func BuildDeactivatePayload(eventsDeactivatePath string) (*events.DeactivatePayload, error) {
	var path string
	{
		path = eventsDeactivatePath
	}
	v := &events.DeactivatePayload{}
	v.Path = path

	return v, nil
}

// BuildDeletePayload builds the payload for the events delete endpoint from
// CLI flags.
func BuildDeletePayload(eventsDeletePath string) (*events.DeletePayload, error) {
	var path string
	{
		path = eventsDeletePath
	}
	v := &events.DeletePayload{}
	v.Path = path

	return v, nil
}
