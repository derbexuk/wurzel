// Code generated by goa v3.5.2, DO NOT EDIT.
//
// events HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/derbexuk/poieventservice/server/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	events "github.com/derbexuk/poieventservice/server/gen/events"
	eventsviews "github.com/derbexuk/poieventservice/server/gen/events/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildPostRequest instantiates a HTTP request object with method and path set
// to call the "events" service "post" endpoint
func (c *Client) BuildPostRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*events.PostPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("events", "post", "*events.PostPayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PostEventsPath(path)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "post", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePostRequest returns an encoder for requests sent to the events post
// server.
func EncodePostRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*events.PostPayload)
		if !ok {
			return goahttp.ErrInvalidType("events", "post", "*events.PostPayload", v)
		}
		body := NewPostRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("events", "post", err)
		}
		return nil
	}
}

// DecodePostResponse returns a decoder for responses returned by the events
// post endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodePostResponse may return the following errors:
//	- "bad_req" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodePostResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body PostBadReqResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "post", err)
			}
			err = ValidatePostBadReqResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("events", "post", err)
			}
			return nil, NewPostBadReq(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "post", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "events" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*events.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("events", "show", "*events.ShowPayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowEventsPath(path)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowResponse returns a decoder for responses returned by the events
// show endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "show", err)
			}
			p := NewShowCspaceEventOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &eventsviews.CspaceEvent{Projected: p, View: view}
			if err = eventsviews.ValidateCspaceEvent(vres); err != nil {
				return nil, goahttp.ErrValidationError("events", "show", err)
			}
			res := events.NewCspaceEvent(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("events", "show", err)
			}
			return nil, NewShowNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildTimeSearchRequest instantiates a HTTP request object with method and
// path set to call the "events" service "TimeSearch" endpoint
func (c *Client) BuildTimeSearchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		start string
		end   string
		order string
		limit int
		path  string
	)
	{
		p, ok := v.(*events.TimeSearchPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("events", "TimeSearch", "*events.TimeSearchPayload", v)
		}
		start = p.Start
		if p.End != nil {
			end = *p.End
		}
		if p.Order != nil {
			order = *p.Order
		}
		if p.Limit != nil {
			limit = *p.Limit
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TimeSearchEventsPath(start, end, order, limit, path)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "TimeSearch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeTimeSearchResponse returns a decoder for responses returned by the
// events TimeSearch endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeTimeSearchResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad_req" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeTimeSearchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TimeSearchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "TimeSearch", err)
			}
			p := NewTimeSearchCspaceEventCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := eventsviews.CspaceEventCollection{Projected: p, View: view}
			if err = eventsviews.ValidateCspaceEventCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("events", "TimeSearch", err)
			}
			res := events.NewCspaceEventCollection(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body TimeSearchNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "TimeSearch", err)
			}
			err = ValidateTimeSearchNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("events", "TimeSearch", err)
			}
			return nil, NewTimeSearchNotFound(&body)
		case http.StatusBadRequest:
			var (
				body TimeSearchBadReqResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "TimeSearch", err)
			}
			err = ValidateTimeSearchBadReqResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("events", "TimeSearch", err)
			}
			return nil, NewTimeSearchBadReq(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "TimeSearch", resp.StatusCode, string(body))
		}
	}
}

// BuildListByTimeAndPathRequest instantiates a HTTP request object with method
// and path set to call the "events" service "ListByTimeAndPath" endpoint
func (c *Client) BuildListByTimeAndPathRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		start string
		end   string
		path  string
	)
	{
		p, ok := v.(*events.ListByTimeAndPathPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("events", "ListByTimeAndPath", "*events.ListByTimeAndPathPayload", v)
		}
		start = p.Start
		if p.End != nil {
			end = *p.End
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListByTimeAndPathEventsPath(start, end, path)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "ListByTimeAndPath", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListByTimeAndPathResponse returns a decoder for responses returned by
// the events ListByTimeAndPath endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeListByTimeAndPathResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeListByTimeAndPathResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListByTimeAndPathResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "ListByTimeAndPath", err)
			}
			p := NewListByTimeAndPathCspaceEventCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := eventsviews.CspaceEventCollection{Projected: p, View: view}
			if err = eventsviews.ValidateCspaceEventCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("events", "ListByTimeAndPath", err)
			}
			res := events.NewCspaceEventCollection(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ListByTimeAndPathNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "ListByTimeAndPath", err)
			}
			err = ValidateListByTimeAndPathNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("events", "ListByTimeAndPath", err)
			}
			return nil, NewListByTimeAndPathNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "ListByTimeAndPath", resp.StatusCode, string(body))
		}
	}
}

// BuildListByPathRequest instantiates a HTTP request object with method and
// path set to call the "events" service "ListByPath" endpoint
func (c *Client) BuildListByPathRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*events.ListByPathPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("events", "ListByPath", "*events.ListByPathPayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListByPathEventsPath(path)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "ListByPath", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListByPathResponse returns a decoder for responses returned by the
// events ListByPath endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListByPathResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeListByPathResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListByPathResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "ListByPath", err)
			}
			p := NewListByPathCspaceEventCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := eventsviews.CspaceEventCollection{Projected: p, View: view}
			if err = eventsviews.ValidateCspaceEventCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("events", "ListByPath", err)
			}
			res := events.NewCspaceEventCollection(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ListByPathNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "ListByPath", err)
			}
			err = ValidateListByPathNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("events", "ListByPath", err)
			}
			return nil, NewListByPathNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "ListByPath", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "events" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*events.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("events", "update", "*events.UpdatePayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateEventsPath(path)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the events
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*events.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("events", "update", "*events.UpdatePayload", v)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("events", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the events
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "bad_req" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpdateBadReqResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "update", err)
			}
			err = ValidateUpdateBadReqResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("events", "update", err)
			}
			return nil, NewUpdateBadReq(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeactivateRequest instantiates a HTTP request object with method and
// path set to call the "events" service "deactivate" endpoint
func (c *Client) BuildDeactivateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*events.DeactivatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("events", "deactivate", "*events.DeactivatePayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeactivateEventsPath(path)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "deactivate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeactivateResponse returns a decoder for responses returned by the
// events deactivate endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeactivateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeDeactivateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeactivateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "deactivate", err)
			}
			err = ValidateDeactivateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("events", "deactivate", err)
			}
			return nil, NewDeactivateNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "deactivate", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "events" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*events.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("events", "delete", "*events.DeletePayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteEventsPath(path)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResponse returns a decoder for responses returned by the events
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("events", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "delete", resp.StatusCode, string(body))
		}
	}
}

// marshalEventsEventPayloadToEventPayloadRequestBody builds a value of type
// *EventPayloadRequestBody from a value of type *events.EventPayload.
func marshalEventsEventPayloadToEventPayloadRequestBody(v *events.EventPayload) *EventPayloadRequestBody {
	if v == nil {
		return nil
	}
	res := &EventPayloadRequestBody{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Deactivated: v.Deactivated,
		Start:       v.Start,
		End:         v.End,
		Path:        v.Path,
	}
	if v.Properties != nil {
		res.Properties = make(map[string]string, len(v.Properties))
		for key, val := range v.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if v.Refs != nil {
		res.Refs = make([]string, len(v.Refs))
		for i, val := range v.Refs {
			res.Refs[i] = val
		}
	}

	return res
}

// marshalEventPayloadRequestBodyToEventsEventPayload builds a value of type
// *events.EventPayload from a value of type *EventPayloadRequestBody.
func marshalEventPayloadRequestBodyToEventsEventPayload(v *EventPayloadRequestBody) *events.EventPayload {
	if v == nil {
		return nil
	}
	res := &events.EventPayload{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Deactivated: v.Deactivated,
		Start:       v.Start,
		End:         v.End,
		Path:        v.Path,
	}
	if v.Properties != nil {
		res.Properties = make(map[string]string, len(v.Properties))
		for key, val := range v.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if v.Refs != nil {
		res.Refs = make([]string, len(v.Refs))
		for i, val := range v.Refs {
			res.Refs[i] = val
		}
	}

	return res
}

// unmarshalCspaceEventResponseToEventsviewsCspaceEventView builds a value of
// type *eventsviews.CspaceEventView from a value of type *CspaceEventResponse.
func unmarshalCspaceEventResponseToEventsviewsCspaceEventView(v *CspaceEventResponse) *eventsviews.CspaceEventView {
	res := &eventsviews.CspaceEventView{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Deactivated: v.Deactivated,
		Start:       v.Start,
		End:         v.End,
		Path:        v.Path,
	}
	if v.Properties != nil {
		res.Properties = make(map[string]string, len(v.Properties))
		for key, val := range v.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if v.Refs != nil {
		res.Refs = make([]string, len(v.Refs))
		for i, val := range v.Refs {
			res.Refs[i] = val
		}
	}

	return res
}
