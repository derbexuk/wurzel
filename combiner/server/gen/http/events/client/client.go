// Code generated by goa v3.5.2, DO NOT EDIT.
//
// events client HTTP transport
//
// Command:
// $ goa gen github.com/derbexuk/wurzel/combiner/server/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the events service endpoint HTTP clients.
type Client struct {
	// Post Doer is the HTTP client used to make requests to the post endpoint.
	PostDoer goahttp.Doer

	// Show Doer is the HTTP client used to make requests to the show endpoint.
	ShowDoer goahttp.Doer

	// TimeSearch Doer is the HTTP client used to make requests to the TimeSearch
	// endpoint.
	TimeSearchDoer goahttp.Doer

	// ListByTimeAndPath Doer is the HTTP client used to make requests to the
	// ListByTimeAndPath endpoint.
	ListByTimeAndPathDoer goahttp.Doer

	// ListByPath Doer is the HTTP client used to make requests to the ListByPath
	// endpoint.
	ListByPathDoer goahttp.Doer

	// Update Doer is the HTTP client used to make requests to the update endpoint.
	UpdateDoer goahttp.Doer

	// Deactivate Doer is the HTTP client used to make requests to the deactivate
	// endpoint.
	DeactivateDoer goahttp.Doer

	// Delete Doer is the HTTP client used to make requests to the delete endpoint.
	DeleteDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the events service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		PostDoer:              doer,
		ShowDoer:              doer,
		TimeSearchDoer:        doer,
		ListByTimeAndPathDoer: doer,
		ListByPathDoer:        doer,
		UpdateDoer:            doer,
		DeactivateDoer:        doer,
		DeleteDoer:            doer,
		CORSDoer:              doer,
		RestoreResponseBody:   restoreBody,
		scheme:                scheme,
		host:                  host,
		decoder:               dec,
		encoder:               enc,
	}
}

// Post returns an endpoint that makes HTTP requests to the events service post
// server.
func (c *Client) Post() goa.Endpoint {
	var (
		encodeRequest  = EncodePostRequest(c.encoder)
		decodeResponse = DecodePostResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPostRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PostDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("events", "post", err)
		}
		return decodeResponse(resp)
	}
}

// Show returns an endpoint that makes HTTP requests to the events service show
// server.
func (c *Client) Show() goa.Endpoint {
	var (
		decodeResponse = DecodeShowResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildShowRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("events", "show", err)
		}
		return decodeResponse(resp)
	}
}

// TimeSearch returns an endpoint that makes HTTP requests to the events
// service TimeSearch server.
func (c *Client) TimeSearch() goa.Endpoint {
	var (
		decodeResponse = DecodeTimeSearchResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTimeSearchRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TimeSearchDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("events", "TimeSearch", err)
		}
		return decodeResponse(resp)
	}
}

// ListByTimeAndPath returns an endpoint that makes HTTP requests to the events
// service ListByTimeAndPath server.
func (c *Client) ListByTimeAndPath() goa.Endpoint {
	var (
		decodeResponse = DecodeListByTimeAndPathResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListByTimeAndPathRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListByTimeAndPathDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("events", "ListByTimeAndPath", err)
		}
		return decodeResponse(resp)
	}
}

// ListByPath returns an endpoint that makes HTTP requests to the events
// service ListByPath server.
func (c *Client) ListByPath() goa.Endpoint {
	var (
		decodeResponse = DecodeListByPathResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListByPathRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListByPathDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("events", "ListByPath", err)
		}
		return decodeResponse(resp)
	}
}

// Update returns an endpoint that makes HTTP requests to the events service
// update server.
func (c *Client) Update() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateRequest(c.encoder)
		decodeResponse = DecodeUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("events", "update", err)
		}
		return decodeResponse(resp)
	}
}

// Deactivate returns an endpoint that makes HTTP requests to the events
// service deactivate server.
func (c *Client) Deactivate() goa.Endpoint {
	var (
		decodeResponse = DecodeDeactivateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeactivateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeactivateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("events", "deactivate", err)
		}
		return decodeResponse(resp)
	}
}

// Delete returns an endpoint that makes HTTP requests to the events service
// delete server.
func (c *Client) Delete() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("events", "delete", err)
		}
		return decodeResponse(resp)
	}
}
