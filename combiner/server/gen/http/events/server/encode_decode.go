// Code generated by goa v3.5.2, DO NOT EDIT.
//
// events HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/derbexuk/wurzel/combiner/server/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	events "github.com/derbexuk/wurzel/combiner/server/gen/events"
	eventsviews "github.com/derbexuk/wurzel/combiner/server/gen/events/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodePostResponse returns an encoder for responses returned by the events
// post endpoint.
func EncodePostResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodePostRequest returns a decoder for requests sent to the events post
// endpoint.
func DecodePostRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PostRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePostRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			path string

			params = mux.Vars(r)
		)
		path = params["path"]
		payload := NewPostPayload(&body, path)

		return payload, nil
	}
}

// EncodePostError returns an encoder for errors returned by the post events
// endpoint.
func EncodePostError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_req":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewPostBadReqResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeShowResponse returns an encoder for responses returned by the events
// show endpoint.
func EncodeShowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*eventsviews.CspaceEvent)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewShowResponseBody(res.Projected)
		case "summary":
			body = NewShowResponseBodySummary(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowRequest returns a decoder for requests sent to the events show
// endpoint.
func DecodeShowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			path string

			params = mux.Vars(r)
		)
		path = params["path"]
		payload := NewShowPayload(path)

		return payload, nil
	}
}

// EncodeShowError returns an encoder for errors returned by the show events
// endpoint.
func EncodeShowError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeTimeSearchResponse returns an encoder for responses returned by the
// events TimeSearch endpoint.
func EncodeTimeSearchResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(eventsviews.CspaceEventCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewCspaceEventResponseCollection(res.Projected)
		case "summary":
			body = NewCspaceEventResponseSummaryCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTimeSearchRequest returns a decoder for requests sent to the events
// TimeSearch endpoint.
func DecodeTimeSearchRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			start string
			end   string
			order string
			limit int
			path  string
			err   error

			params = mux.Vars(r)
		)
		start = params["start"]
		err = goa.MergeErrors(err, goa.ValidateFormat("start", start, goa.FormatDateTime))

		end = params["end"]
		err = goa.MergeErrors(err, goa.ValidateFormat("end", end, goa.FormatDateTime))

		order = params["order"]
		{
			limitRaw := params["limit"]
			v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
			}
			limit = int(v)
		}
		path = params["path"]
		if err != nil {
			return nil, err
		}
		payload := NewTimeSearchPayload(start, end, order, limit, path)

		return payload, nil
	}
}

// EncodeTimeSearchError returns an encoder for errors returned by the
// TimeSearch events endpoint.
func EncodeTimeSearchError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewTimeSearchNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "bad_req":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewTimeSearchBadReqResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListByTimeAndPathResponse returns an encoder for responses returned by
// the events ListByTimeAndPath endpoint.
func EncodeListByTimeAndPathResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(eventsviews.CspaceEventCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewCspaceEventResponseCollection(res.Projected)
		case "summary":
			body = NewCspaceEventResponseSummaryCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListByTimeAndPathRequest returns a decoder for requests sent to the
// events ListByTimeAndPath endpoint.
func DecodeListByTimeAndPathRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			start string
			end   string
			path  string
			err   error

			params = mux.Vars(r)
		)
		start = params["start"]
		err = goa.MergeErrors(err, goa.ValidateFormat("start", start, goa.FormatDateTime))

		end = params["end"]
		err = goa.MergeErrors(err, goa.ValidateFormat("end", end, goa.FormatDateTime))

		path = params["path"]
		if err != nil {
			return nil, err
		}
		payload := NewListByTimeAndPathPayload(start, end, path)

		return payload, nil
	}
}

// EncodeListByTimeAndPathError returns an encoder for errors returned by the
// ListByTimeAndPath events endpoint.
func EncodeListByTimeAndPathError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListByTimeAndPathNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListByPathResponse returns an encoder for responses returned by the
// events ListByPath endpoint.
func EncodeListByPathResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(eventsviews.CspaceEventCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewCspaceEventResponseCollection(res.Projected)
		case "summary":
			body = NewCspaceEventResponseSummaryCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListByPathRequest returns a decoder for requests sent to the events
// ListByPath endpoint.
func DecodeListByPathRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			path string

			params = mux.Vars(r)
		)
		path = params["path"]
		payload := NewListByPathPayload(path)

		return payload, nil
	}
}

// EncodeListByPathError returns an encoder for errors returned by the
// ListByPath events endpoint.
func EncodeListByPathError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListByPathNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateResponse returns an encoder for responses returned by the events
// update endpoint.
func EncodeUpdateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeUpdateRequest returns a decoder for requests sent to the events update
// endpoint.
func DecodeUpdateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			path string

			params = mux.Vars(r)
		)
		path = params["path"]
		payload := NewUpdatePayload(&body, path)

		return payload, nil
	}
}

// EncodeUpdateError returns an encoder for errors returned by the update
// events endpoint.
func EncodeUpdateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_req":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateBadReqResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeactivateResponse returns an encoder for responses returned by the
// events deactivate endpoint.
func EncodeDeactivateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeactivateRequest returns a decoder for requests sent to the events
// deactivate endpoint.
func DecodeDeactivateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			path string

			params = mux.Vars(r)
		)
		path = params["path"]
		payload := NewDeactivatePayload(path)

		return payload, nil
	}
}

// EncodeDeactivateError returns an encoder for errors returned by the
// deactivate events endpoint.
func EncodeDeactivateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeactivateNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteResponse returns an encoder for responses returned by the events
// delete endpoint.
func EncodeDeleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteRequest returns a decoder for requests sent to the events delete
// endpoint.
func DecodeDeleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			path string

			params = mux.Vars(r)
		)
		path = params["path"]
		payload := NewDeletePayload(path)

		return payload, nil
	}
}

// EncodeDeleteError returns an encoder for errors returned by the delete
// events endpoint.
func EncodeDeleteError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalEventPayloadRequestBodyToEventsEventPayload builds a value of type
// *events.EventPayload from a value of type *EventPayloadRequestBody.
func unmarshalEventPayloadRequestBodyToEventsEventPayload(v *EventPayloadRequestBody) *events.EventPayload {
	if v == nil {
		return nil
	}
	res := &events.EventPayload{
		ID:          *v.ID,
		Title:       *v.Title,
		Description: v.Description,
		Deactivated: v.Deactivated,
		Start:       *v.Start,
		End:         v.End,
		Path:        v.Path,
	}
	if v.Properties != nil {
		res.Properties = make(map[string]string, len(v.Properties))
		for key, val := range v.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if v.Refs != nil {
		res.Refs = make([]string, len(v.Refs))
		for i, val := range v.Refs {
			res.Refs[i] = val
		}
	}

	return res
}

// marshalEventsviewsCspaceEventViewToCspaceEventResponse builds a value of
// type *CspaceEventResponse from a value of type *eventsviews.CspaceEventView.
func marshalEventsviewsCspaceEventViewToCspaceEventResponse(v *eventsviews.CspaceEventView) *CspaceEventResponse {
	res := &CspaceEventResponse{
		ID:          *v.ID,
		Title:       *v.Title,
		Description: v.Description,
		Deactivated: v.Deactivated,
		Start:       *v.Start,
		End:         v.End,
		Path:        v.Path,
	}
	if v.Properties != nil {
		res.Properties = make(map[string]string, len(v.Properties))
		for key, val := range v.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if v.Refs != nil {
		res.Refs = make([]string, len(v.Refs))
		for i, val := range v.Refs {
			res.Refs[i] = val
		}
	}

	return res
}

// marshalEventsviewsCspaceEventViewToCspaceEventResponseSummary builds a value
// of type *CspaceEventResponseSummary from a value of type
// *eventsviews.CspaceEventView.
func marshalEventsviewsCspaceEventViewToCspaceEventResponseSummary(v *eventsviews.CspaceEventView) *CspaceEventResponseSummary {
	res := &CspaceEventResponseSummary{
		ID:    *v.ID,
		Title: *v.Title,
		Start: *v.Start,
		End:   v.End,
		Path:  v.Path,
	}

	return res
}
