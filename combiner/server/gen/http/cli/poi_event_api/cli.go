// Code generated by goa v3.5.2, DO NOT EDIT.
//
// PoiEventApi HTTP client CLI support package
//
// Command:
// $ goa gen github.com/derbexuk/wurzel/combiner/server/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	eventsc "github.com/derbexuk/wurzel/combiner/server/gen/http/events/client"
	organismsc "github.com/derbexuk/wurzel/combiner/server/gen/http/organisms/client"
	poisc "github.com/derbexuk/wurzel/combiner/server/gen/http/pois/client"
	uploadc "github.com/derbexuk/wurzel/combiner/server/gen/http/upload/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `events (post|show|time-search|list-by-time-and-path|list-by-path|update|deactivate|delete)
organisms (post|show|update|delete|deactivate|list-by-path|list-by-reference)
pois (post|show|list-by-path|list-by-reference|update|deactivate|delete)
upload (fetch|csv)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` events post --body '{
      "events": [
         {
            "deactivated": true,
            "description": "Quidem est quaerat.",
            "end": "2017-08-22T12:06:30.696Z",
            "id": "59b287534defd02dace3671b",
            "path": "Voluptas quis velit sed ducimus laboriosam.",
            "properties": {
               "Maxime possimus porro temporibus consequuntur tempore.": "Sit eos sit tempora nihil ipsum.",
               "Voluptatem et vero blanditiis non iste.": "Et pariatur fuga."
            },
            "refs": [
               "Molestiae optio hic sequi ea dolores tempora.",
               "Consequuntur perspiciatis ipsam accusamus natus.",
               "Debitis esse consequatur quo nesciunt."
            ],
            "start": "2017-08-22T12:06:30.696Z",
            "title": "Sed corporis qui."
         },
         {
            "deactivated": true,
            "description": "Quidem est quaerat.",
            "end": "2017-08-22T12:06:30.696Z",
            "id": "59b287534defd02dace3671b",
            "path": "Voluptas quis velit sed ducimus laboriosam.",
            "properties": {
               "Maxime possimus porro temporibus consequuntur tempore.": "Sit eos sit tempora nihil ipsum.",
               "Voluptatem et vero blanditiis non iste.": "Et pariatur fuga."
            },
            "refs": [
               "Molestiae optio hic sequi ea dolores tempora.",
               "Consequuntur perspiciatis ipsam accusamus natus.",
               "Debitis esse consequatur quo nesciunt."
            ],
            "start": "2017-08-22T12:06:30.696Z",
            "title": "Sed corporis qui."
         }
      ]
   }' --path "/croydon/purley/59b287534defd02dace3671b"` + "\n" +
		os.Args[0] + ` organisms post --body '{
      "organisms": [
         {
            "deactivated": true,
            "description": "Numquam laboriosam quaerat accusantium.",
            "id": "59b287534defd02dace3671b",
            "path": "Non dolor animi.",
            "properties": {
               "Ut sed incidunt.": "Pariatur deserunt non quisquam dolor."
            },
            "refs": [
               "Ea sunt consectetur voluptatem est.",
               "Sed quasi libero excepturi molestiae vel."
            ],
            "title": "At natus nobis facere corporis."
         },
         {
            "deactivated": true,
            "description": "Numquam laboriosam quaerat accusantium.",
            "id": "59b287534defd02dace3671b",
            "path": "Non dolor animi.",
            "properties": {
               "Ut sed incidunt.": "Pariatur deserunt non quisquam dolor."
            },
            "refs": [
               "Ea sunt consectetur voluptatem est.",
               "Sed quasi libero excepturi molestiae vel."
            ],
            "title": "At natus nobis facere corporis."
         },
         {
            "deactivated": true,
            "description": "Numquam laboriosam quaerat accusantium.",
            "id": "59b287534defd02dace3671b",
            "path": "Non dolor animi.",
            "properties": {
               "Ut sed incidunt.": "Pariatur deserunt non quisquam dolor."
            },
            "refs": [
               "Ea sunt consectetur voluptatem est.",
               "Sed quasi libero excepturi molestiae vel."
            ],
            "title": "At natus nobis facere corporis."
         },
         {
            "deactivated": true,
            "description": "Numquam laboriosam quaerat accusantium.",
            "id": "59b287534defd02dace3671b",
            "path": "Non dolor animi.",
            "properties": {
               "Ut sed incidunt.": "Pariatur deserunt non quisquam dolor."
            },
            "refs": [
               "Ea sunt consectetur voluptatem est.",
               "Sed quasi libero excepturi molestiae vel."
            ],
            "title": "At natus nobis facere corporis."
         }
      ]
   }' --path "Quas id commodi nam aut et."` + "\n" +
		os.Args[0] + ` pois post --body '{
      "pois": [
         {
            "deactivated": false,
            "description": "Perferendis consequatur et.",
            "geojson": "Voluptates eum enim aut.",
            "geopath": {
               "geopoints": [
                  [
                     0.6467556,
                     0.28522083,
                     0.46987006,
                     0.22842954
                  ],
                  [
                     0.935357,
                     0.68563277
                  ]
               ],
               "id": "59b287534defd02dace3671b",
               "title": "Dolorum qui.",
               "type": "Ea enim sunt animi et."
            },
            "id": "59b287534defd02dace3671b",
            "location": "Placeat maxime sunt perferendis vel sunt.",
            "path": "Ut voluptas.",
            "properties": {
               "Dolores voluptas sunt et quia voluptatem.": "Dolores sed.",
               "Officiis voluptatem corporis voluptatem accusamus dolores.": "Saepe molestias in.",
               "Ut aut dolore qui iste asperiores hic.": "Mollitia nihil cum et voluptate et suscipit."
            },
            "refs": [
               "Aliquid cupiditate.",
               "Nihil sint voluptate incidunt excepturi totam."
            ],
            "title": "Vitae qui in dolorum officiis laborum dolor."
         },
         {
            "deactivated": false,
            "description": "Perferendis consequatur et.",
            "geojson": "Voluptates eum enim aut.",
            "geopath": {
               "geopoints": [
                  [
                     0.6467556,
                     0.28522083,
                     0.46987006,
                     0.22842954
                  ],
                  [
                     0.935357,
                     0.68563277
                  ]
               ],
               "id": "59b287534defd02dace3671b",
               "title": "Dolorum qui.",
               "type": "Ea enim sunt animi et."
            },
            "id": "59b287534defd02dace3671b",
            "location": "Placeat maxime sunt perferendis vel sunt.",
            "path": "Ut voluptas.",
            "properties": {
               "Dolores voluptas sunt et quia voluptatem.": "Dolores sed.",
               "Officiis voluptatem corporis voluptatem accusamus dolores.": "Saepe molestias in.",
               "Ut aut dolore qui iste asperiores hic.": "Mollitia nihil cum et voluptate et suscipit."
            },
            "refs": [
               "Aliquid cupiditate.",
               "Nihil sint voluptate incidunt excepturi totam."
            ],
            "title": "Vitae qui in dolorum officiis laborum dolor."
         },
         {
            "deactivated": false,
            "description": "Perferendis consequatur et.",
            "geojson": "Voluptates eum enim aut.",
            "geopath": {
               "geopoints": [
                  [
                     0.6467556,
                     0.28522083,
                     0.46987006,
                     0.22842954
                  ],
                  [
                     0.935357,
                     0.68563277
                  ]
               ],
               "id": "59b287534defd02dace3671b",
               "title": "Dolorum qui.",
               "type": "Ea enim sunt animi et."
            },
            "id": "59b287534defd02dace3671b",
            "location": "Placeat maxime sunt perferendis vel sunt.",
            "path": "Ut voluptas.",
            "properties": {
               "Dolores voluptas sunt et quia voluptatem.": "Dolores sed.",
               "Officiis voluptatem corporis voluptatem accusamus dolores.": "Saepe molestias in.",
               "Ut aut dolore qui iste asperiores hic.": "Mollitia nihil cum et voluptate et suscipit."
            },
            "refs": [
               "Aliquid cupiditate.",
               "Nihil sint voluptate incidunt excepturi totam."
            ],
            "title": "Vitae qui in dolorum officiis laborum dolor."
         },
         {
            "deactivated": false,
            "description": "Perferendis consequatur et.",
            "geojson": "Voluptates eum enim aut.",
            "geopath": {
               "geopoints": [
                  [
                     0.6467556,
                     0.28522083,
                     0.46987006,
                     0.22842954
                  ],
                  [
                     0.935357,
                     0.68563277
                  ]
               ],
               "id": "59b287534defd02dace3671b",
               "title": "Dolorum qui.",
               "type": "Ea enim sunt animi et."
            },
            "id": "59b287534defd02dace3671b",
            "location": "Placeat maxime sunt perferendis vel sunt.",
            "path": "Ut voluptas.",
            "properties": {
               "Dolores voluptas sunt et quia voluptatem.": "Dolores sed.",
               "Officiis voluptatem corporis voluptatem accusamus dolores.": "Saepe molestias in.",
               "Ut aut dolore qui iste asperiores hic.": "Mollitia nihil cum et voluptate et suscipit."
            },
            "refs": [
               "Aliquid cupiditate.",
               "Nihil sint voluptate incidunt excepturi totam."
            ],
            "title": "Vitae qui in dolorum officiis laborum dolor."
         }
      ]
   }' --path "Odio iure."` + "\n" +
		os.Args[0] + ` upload fetch --config-file "test.yaml"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		eventsFlags = flag.NewFlagSet("events", flag.ContinueOnError)

		eventsPostFlags    = flag.NewFlagSet("post", flag.ExitOnError)
		eventsPostBodyFlag = eventsPostFlags.String("body", "REQUIRED", "")
		eventsPostPathFlag = eventsPostFlags.String("path", "REQUIRED", "the path of the Event")

		eventsShowFlags    = flag.NewFlagSet("show", flag.ExitOnError)
		eventsShowPathFlag = eventsShowFlags.String("path", "REQUIRED", "the path of the Event")

		eventsTimeSearchFlags     = flag.NewFlagSet("time-search", flag.ExitOnError)
		eventsTimeSearchStartFlag = eventsTimeSearchFlags.String("start", "REQUIRED", "Start")
		eventsTimeSearchEndFlag   = eventsTimeSearchFlags.String("end", "REQUIRED", "End")
		eventsTimeSearchOrderFlag = eventsTimeSearchFlags.String("order", "REQUIRED", "Order")
		eventsTimeSearchLimitFlag = eventsTimeSearchFlags.String("limit", "REQUIRED", "Limit")
		eventsTimeSearchPathFlag  = eventsTimeSearchFlags.String("path", "REQUIRED", "Path")

		eventsListByTimeAndPathFlags     = flag.NewFlagSet("list-by-time-and-path", flag.ExitOnError)
		eventsListByTimeAndPathStartFlag = eventsListByTimeAndPathFlags.String("start", "REQUIRED", "Start")
		eventsListByTimeAndPathEndFlag   = eventsListByTimeAndPathFlags.String("end", "REQUIRED", "End")
		eventsListByTimeAndPathPathFlag  = eventsListByTimeAndPathFlags.String("path", "REQUIRED", "Path")

		eventsListByPathFlags    = flag.NewFlagSet("list-by-path", flag.ExitOnError)
		eventsListByPathPathFlag = eventsListByPathFlags.String("path", "REQUIRED", "Path")

		eventsUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		eventsUpdateBodyFlag = eventsUpdateFlags.String("body", "REQUIRED", "")
		eventsUpdatePathFlag = eventsUpdateFlags.String("path", "REQUIRED", "Path")

		eventsDeactivateFlags    = flag.NewFlagSet("deactivate", flag.ExitOnError)
		eventsDeactivatePathFlag = eventsDeactivateFlags.String("path", "REQUIRED", "Path")

		eventsDeleteFlags    = flag.NewFlagSet("delete", flag.ExitOnError)
		eventsDeletePathFlag = eventsDeleteFlags.String("path", "REQUIRED", "Path")

		organismsFlags = flag.NewFlagSet("organisms", flag.ContinueOnError)

		organismsPostFlags    = flag.NewFlagSet("post", flag.ExitOnError)
		organismsPostBodyFlag = organismsPostFlags.String("body", "REQUIRED", "")
		organismsPostPathFlag = organismsPostFlags.String("path", "REQUIRED", "the path of the org")

		organismsShowFlags    = flag.NewFlagSet("show", flag.ExitOnError)
		organismsShowPathFlag = organismsShowFlags.String("path", "REQUIRED", "the path of the org")

		organismsUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		organismsUpdateBodyFlag = organismsUpdateFlags.String("body", "REQUIRED", "")
		organismsUpdatePathFlag = organismsUpdateFlags.String("path", "REQUIRED", "the path of the org")

		organismsDeleteFlags    = flag.NewFlagSet("delete", flag.ExitOnError)
		organismsDeletePathFlag = organismsDeleteFlags.String("path", "REQUIRED", "the path of the org")

		organismsDeactivateFlags    = flag.NewFlagSet("deactivate", flag.ExitOnError)
		organismsDeactivatePathFlag = organismsDeactivateFlags.String("path", "REQUIRED", "Path")

		organismsListByPathFlags    = flag.NewFlagSet("list-by-path", flag.ExitOnError)
		organismsListByPathPathFlag = organismsListByPathFlags.String("path", "REQUIRED", "the path of the Org")

		organismsListByReferenceFlags    = flag.NewFlagSet("list-by-reference", flag.ExitOnError)
		organismsListByReferencePathFlag = organismsListByReferenceFlags.String("path", "REQUIRED", "the path of the Org")

		poisFlags = flag.NewFlagSet("pois", flag.ContinueOnError)

		poisPostFlags    = flag.NewFlagSet("post", flag.ExitOnError)
		poisPostBodyFlag = poisPostFlags.String("body", "REQUIRED", "")
		poisPostPathFlag = poisPostFlags.String("path", "REQUIRED", "the path of the POI")

		poisShowFlags    = flag.NewFlagSet("show", flag.ExitOnError)
		poisShowPathFlag = poisShowFlags.String("path", "REQUIRED", "the path of the POI")

		poisListByPathFlags    = flag.NewFlagSet("list-by-path", flag.ExitOnError)
		poisListByPathPathFlag = poisListByPathFlags.String("path", "REQUIRED", "the path of the POI")

		poisListByReferenceFlags    = flag.NewFlagSet("list-by-reference", flag.ExitOnError)
		poisListByReferencePathFlag = poisListByReferenceFlags.String("path", "REQUIRED", "the path of the POI")

		poisUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		poisUpdateBodyFlag = poisUpdateFlags.String("body", "REQUIRED", "")
		poisUpdatePathFlag = poisUpdateFlags.String("path", "REQUIRED", "the path of the POI")

		poisDeactivateFlags    = flag.NewFlagSet("deactivate", flag.ExitOnError)
		poisDeactivatePathFlag = poisDeactivateFlags.String("path", "REQUIRED", "the path of the POI")

		poisDeleteFlags    = flag.NewFlagSet("delete", flag.ExitOnError)
		poisDeletePathFlag = poisDeleteFlags.String("path", "REQUIRED", "the path of the POI")

		uploadFlags = flag.NewFlagSet("upload", flag.ContinueOnError)

		uploadFetchFlags          = flag.NewFlagSet("fetch", flag.ExitOnError)
		uploadFetchConfigFileFlag = uploadFetchFlags.String("config-file", "REQUIRED", "Config file name")

		uploadCsvFlags          = flag.NewFlagSet("csv", flag.ExitOnError)
		uploadCsvConfigFileFlag = uploadCsvFlags.String("config-file", "REQUIRED", "Config file name")
		uploadCsvResourceFlag   = uploadCsvFlags.String("resource", "REQUIRED", "Service we are uploading")
	)
	eventsFlags.Usage = eventsUsage
	eventsPostFlags.Usage = eventsPostUsage
	eventsShowFlags.Usage = eventsShowUsage
	eventsTimeSearchFlags.Usage = eventsTimeSearchUsage
	eventsListByTimeAndPathFlags.Usage = eventsListByTimeAndPathUsage
	eventsListByPathFlags.Usage = eventsListByPathUsage
	eventsUpdateFlags.Usage = eventsUpdateUsage
	eventsDeactivateFlags.Usage = eventsDeactivateUsage
	eventsDeleteFlags.Usage = eventsDeleteUsage

	organismsFlags.Usage = organismsUsage
	organismsPostFlags.Usage = organismsPostUsage
	organismsShowFlags.Usage = organismsShowUsage
	organismsUpdateFlags.Usage = organismsUpdateUsage
	organismsDeleteFlags.Usage = organismsDeleteUsage
	organismsDeactivateFlags.Usage = organismsDeactivateUsage
	organismsListByPathFlags.Usage = organismsListByPathUsage
	organismsListByReferenceFlags.Usage = organismsListByReferenceUsage

	poisFlags.Usage = poisUsage
	poisPostFlags.Usage = poisPostUsage
	poisShowFlags.Usage = poisShowUsage
	poisListByPathFlags.Usage = poisListByPathUsage
	poisListByReferenceFlags.Usage = poisListByReferenceUsage
	poisUpdateFlags.Usage = poisUpdateUsage
	poisDeactivateFlags.Usage = poisDeactivateUsage
	poisDeleteFlags.Usage = poisDeleteUsage

	uploadFlags.Usage = uploadUsage
	uploadFetchFlags.Usage = uploadFetchUsage
	uploadCsvFlags.Usage = uploadCsvUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "events":
			svcf = eventsFlags
		case "organisms":
			svcf = organismsFlags
		case "pois":
			svcf = poisFlags
		case "upload":
			svcf = uploadFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "events":
			switch epn {
			case "post":
				epf = eventsPostFlags

			case "show":
				epf = eventsShowFlags

			case "time-search":
				epf = eventsTimeSearchFlags

			case "list-by-time-and-path":
				epf = eventsListByTimeAndPathFlags

			case "list-by-path":
				epf = eventsListByPathFlags

			case "update":
				epf = eventsUpdateFlags

			case "deactivate":
				epf = eventsDeactivateFlags

			case "delete":
				epf = eventsDeleteFlags

			}

		case "organisms":
			switch epn {
			case "post":
				epf = organismsPostFlags

			case "show":
				epf = organismsShowFlags

			case "update":
				epf = organismsUpdateFlags

			case "delete":
				epf = organismsDeleteFlags

			case "deactivate":
				epf = organismsDeactivateFlags

			case "list-by-path":
				epf = organismsListByPathFlags

			case "list-by-reference":
				epf = organismsListByReferenceFlags

			}

		case "pois":
			switch epn {
			case "post":
				epf = poisPostFlags

			case "show":
				epf = poisShowFlags

			case "list-by-path":
				epf = poisListByPathFlags

			case "list-by-reference":
				epf = poisListByReferenceFlags

			case "update":
				epf = poisUpdateFlags

			case "deactivate":
				epf = poisDeactivateFlags

			case "delete":
				epf = poisDeleteFlags

			}

		case "upload":
			switch epn {
			case "fetch":
				epf = uploadFetchFlags

			case "csv":
				epf = uploadCsvFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "events":
			c := eventsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "post":
				endpoint = c.Post()
				data, err = eventsc.BuildPostPayload(*eventsPostBodyFlag, *eventsPostPathFlag)
			case "show":
				endpoint = c.Show()
				data, err = eventsc.BuildShowPayload(*eventsShowPathFlag)
			case "time-search":
				endpoint = c.TimeSearch()
				data, err = eventsc.BuildTimeSearchPayload(*eventsTimeSearchStartFlag, *eventsTimeSearchEndFlag, *eventsTimeSearchOrderFlag, *eventsTimeSearchLimitFlag, *eventsTimeSearchPathFlag)
			case "list-by-time-and-path":
				endpoint = c.ListByTimeAndPath()
				data, err = eventsc.BuildListByTimeAndPathPayload(*eventsListByTimeAndPathStartFlag, *eventsListByTimeAndPathEndFlag, *eventsListByTimeAndPathPathFlag)
			case "list-by-path":
				endpoint = c.ListByPath()
				data, err = eventsc.BuildListByPathPayload(*eventsListByPathPathFlag)
			case "update":
				endpoint = c.Update()
				data, err = eventsc.BuildUpdatePayload(*eventsUpdateBodyFlag, *eventsUpdatePathFlag)
			case "deactivate":
				endpoint = c.Deactivate()
				data, err = eventsc.BuildDeactivatePayload(*eventsDeactivatePathFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = eventsc.BuildDeletePayload(*eventsDeletePathFlag)
			}
		case "organisms":
			c := organismsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "post":
				endpoint = c.Post()
				data, err = organismsc.BuildPostPayload(*organismsPostBodyFlag, *organismsPostPathFlag)
			case "show":
				endpoint = c.Show()
				data, err = organismsc.BuildShowPayload(*organismsShowPathFlag)
			case "update":
				endpoint = c.Update()
				data, err = organismsc.BuildUpdatePayload(*organismsUpdateBodyFlag, *organismsUpdatePathFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = organismsc.BuildDeletePayload(*organismsDeletePathFlag)
			case "deactivate":
				endpoint = c.Deactivate()
				data, err = organismsc.BuildDeactivatePayload(*organismsDeactivatePathFlag)
			case "list-by-path":
				endpoint = c.ListByPath()
				data, err = organismsc.BuildListByPathPayload(*organismsListByPathPathFlag)
			case "list-by-reference":
				endpoint = c.ListByReference()
				data, err = organismsc.BuildListByReferencePayload(*organismsListByReferencePathFlag)
			}
		case "pois":
			c := poisc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "post":
				endpoint = c.Post()
				data, err = poisc.BuildPostPayload(*poisPostBodyFlag, *poisPostPathFlag)
			case "show":
				endpoint = c.Show()
				data, err = poisc.BuildShowPayload(*poisShowPathFlag)
			case "list-by-path":
				endpoint = c.ListByPath()
				data, err = poisc.BuildListByPathPayload(*poisListByPathPathFlag)
			case "list-by-reference":
				endpoint = c.ListByReference()
				data, err = poisc.BuildListByReferencePayload(*poisListByReferencePathFlag)
			case "update":
				endpoint = c.Update()
				data, err = poisc.BuildUpdatePayload(*poisUpdateBodyFlag, *poisUpdatePathFlag)
			case "deactivate":
				endpoint = c.Deactivate()
				data, err = poisc.BuildDeactivatePayload(*poisDeactivatePathFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = poisc.BuildDeletePayload(*poisDeletePathFlag)
			}
		case "upload":
			c := uploadc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "fetch":
				endpoint = c.Fetch()
				data, err = uploadc.BuildFetchPayload(*uploadFetchConfigFileFlag)
			case "csv":
				endpoint = c.Csv()
				data, err = uploadc.BuildCsvPayload(*uploadCsvConfigFileFlag, *uploadCsvResourceFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// eventsUsage displays the usage of the events command and its subcommands.
func eventsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the events service interface.
Usage:
    %[1]s [globalflags] events COMMAND [flags]

COMMAND:
    post: Add an event
    show: Show an event in full
    time-search: Show events according to search values
    list-by-time-and-path: List Events for a path
    list-by-path: List Events for a path
    update: Update an event
    deactivate: Delete an Event
    delete: Delete an Event

Additional help:
    %[1]s events COMMAND --help
`, os.Args[0])
}
func eventsPostUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events post -body JSON -path STRING

Add an event
    -body JSON: 
    -path STRING: the path of the Event

Example:
    %[1]s events post --body '{
      "events": [
         {
            "deactivated": true,
            "description": "Quidem est quaerat.",
            "end": "2017-08-22T12:06:30.696Z",
            "id": "59b287534defd02dace3671b",
            "path": "Voluptas quis velit sed ducimus laboriosam.",
            "properties": {
               "Maxime possimus porro temporibus consequuntur tempore.": "Sit eos sit tempora nihil ipsum.",
               "Voluptatem et vero blanditiis non iste.": "Et pariatur fuga."
            },
            "refs": [
               "Molestiae optio hic sequi ea dolores tempora.",
               "Consequuntur perspiciatis ipsam accusamus natus.",
               "Debitis esse consequatur quo nesciunt."
            ],
            "start": "2017-08-22T12:06:30.696Z",
            "title": "Sed corporis qui."
         },
         {
            "deactivated": true,
            "description": "Quidem est quaerat.",
            "end": "2017-08-22T12:06:30.696Z",
            "id": "59b287534defd02dace3671b",
            "path": "Voluptas quis velit sed ducimus laboriosam.",
            "properties": {
               "Maxime possimus porro temporibus consequuntur tempore.": "Sit eos sit tempora nihil ipsum.",
               "Voluptatem et vero blanditiis non iste.": "Et pariatur fuga."
            },
            "refs": [
               "Molestiae optio hic sequi ea dolores tempora.",
               "Consequuntur perspiciatis ipsam accusamus natus.",
               "Debitis esse consequatur quo nesciunt."
            ],
            "start": "2017-08-22T12:06:30.696Z",
            "title": "Sed corporis qui."
         }
      ]
   }' --path "/croydon/purley/59b287534defd02dace3671b"
`, os.Args[0])
}

func eventsShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events show -path STRING

Show an event in full
    -path STRING: the path of the Event

Example:
    %[1]s events show --path "/croydon/purley/59b287534defd02dace3671b"
`, os.Args[0])
}

func eventsTimeSearchUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events time-search -start STRING -end STRING -order STRING -limit INT -path STRING

Show events according to search values
    -start STRING: Start
    -end STRING: End
    -order STRING: Order
    -limit INT: Limit
    -path STRING: Path

Example:
    %[1]s events time-search --start "2017-08-22T12:06:30.696Z" --end "2017-08-22T12:06:30.696Z" --order "A" --limit 3350232174616619253 --path "/croydon/purley/59b287534defd02dace3671b"
`, os.Args[0])
}

func eventsListByTimeAndPathUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events list-by-time-and-path -start STRING -end STRING -path STRING

List Events for a path
    -start STRING: Start
    -end STRING: End
    -path STRING: Path

Example:
    %[1]s events list-by-time-and-path --start "2017-08-22T12:06:30.696Z" --end "2017-08-22T12:06:30.696Z" --path "/croydon/purley/59b287534defd02dace3671b"
`, os.Args[0])
}

func eventsListByPathUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events list-by-path -path STRING

List Events for a path
    -path STRING: Path

Example:
    %[1]s events list-by-path --path "/croydon/purley/59b287534defd02dace3671b"
`, os.Args[0])
}

func eventsUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events update -body JSON -path STRING

Update an event
    -body JSON: 
    -path STRING: Path

Example:
    %[1]s events update --body '{
      "event": {
         "deactivated": true,
         "description": "Quidem est quaerat.",
         "end": "2017-08-22T12:06:30.696Z",
         "id": "59b287534defd02dace3671b",
         "path": "Voluptas quis velit sed ducimus laboriosam.",
         "properties": {
            "Maxime possimus porro temporibus consequuntur tempore.": "Sit eos sit tempora nihil ipsum.",
            "Voluptatem et vero blanditiis non iste.": "Et pariatur fuga."
         },
         "refs": [
            "Molestiae optio hic sequi ea dolores tempora.",
            "Consequuntur perspiciatis ipsam accusamus natus.",
            "Debitis esse consequatur quo nesciunt."
         ],
         "start": "2017-08-22T12:06:30.696Z",
         "title": "Sed corporis qui."
      }
   }' --path "/croydon/purley/59b287534defd02dace3671b"
`, os.Args[0])
}

func eventsDeactivateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events deactivate -path STRING

Delete an Event
    -path STRING: Path

Example:
    %[1]s events deactivate --path "/croydon/purley/59b287534defd02dace3671b"
`, os.Args[0])
}

func eventsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events delete -path STRING

Delete an Event
    -path STRING: Path

Example:
    %[1]s events delete --path "/croydon/purley/59b287534defd02dace3671b"
`, os.Args[0])
}

// organismsUsage displays the usage of the organisms command and its
// subcommands.
func organismsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the organisms service interface.
Usage:
    %[1]s [globalflags] organisms COMMAND [flags]

COMMAND:
    post: Add an organism
    show: Show an organism in full
    update: Update an organism
    delete: Delete an Organism
    deactivate: Delete an Organism
    list-by-path: List Orgs for a Path
    list-by-reference: List Orgs for a Ref

Additional help:
    %[1]s organisms COMMAND --help
`, os.Args[0])
}
func organismsPostUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organisms post -body JSON -path STRING

Add an organism
    -body JSON: 
    -path STRING: the path of the org

Example:
    %[1]s organisms post --body '{
      "organisms": [
         {
            "deactivated": true,
            "description": "Numquam laboriosam quaerat accusantium.",
            "id": "59b287534defd02dace3671b",
            "path": "Non dolor animi.",
            "properties": {
               "Ut sed incidunt.": "Pariatur deserunt non quisquam dolor."
            },
            "refs": [
               "Ea sunt consectetur voluptatem est.",
               "Sed quasi libero excepturi molestiae vel."
            ],
            "title": "At natus nobis facere corporis."
         },
         {
            "deactivated": true,
            "description": "Numquam laboriosam quaerat accusantium.",
            "id": "59b287534defd02dace3671b",
            "path": "Non dolor animi.",
            "properties": {
               "Ut sed incidunt.": "Pariatur deserunt non quisquam dolor."
            },
            "refs": [
               "Ea sunt consectetur voluptatem est.",
               "Sed quasi libero excepturi molestiae vel."
            ],
            "title": "At natus nobis facere corporis."
         },
         {
            "deactivated": true,
            "description": "Numquam laboriosam quaerat accusantium.",
            "id": "59b287534defd02dace3671b",
            "path": "Non dolor animi.",
            "properties": {
               "Ut sed incidunt.": "Pariatur deserunt non quisquam dolor."
            },
            "refs": [
               "Ea sunt consectetur voluptatem est.",
               "Sed quasi libero excepturi molestiae vel."
            ],
            "title": "At natus nobis facere corporis."
         },
         {
            "deactivated": true,
            "description": "Numquam laboriosam quaerat accusantium.",
            "id": "59b287534defd02dace3671b",
            "path": "Non dolor animi.",
            "properties": {
               "Ut sed incidunt.": "Pariatur deserunt non quisquam dolor."
            },
            "refs": [
               "Ea sunt consectetur voluptatem est.",
               "Sed quasi libero excepturi molestiae vel."
            ],
            "title": "At natus nobis facere corporis."
         }
      ]
   }' --path "Quas id commodi nam aut et."
`, os.Args[0])
}

func organismsShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organisms show -path STRING

Show an organism in full
    -path STRING: the path of the org

Example:
    %[1]s organisms show --path "Perspiciatis eius."
`, os.Args[0])
}

func organismsUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organisms update -body JSON -path STRING

Update an organism
    -body JSON: 
    -path STRING: the path of the org

Example:
    %[1]s organisms update --body '{
      "organism": {
         "deactivated": true,
         "description": "Numquam laboriosam quaerat accusantium.",
         "id": "59b287534defd02dace3671b",
         "path": "Non dolor animi.",
         "properties": {
            "Ut sed incidunt.": "Pariatur deserunt non quisquam dolor."
         },
         "refs": [
            "Ea sunt consectetur voluptatem est.",
            "Sed quasi libero excepturi molestiae vel."
         ],
         "title": "At natus nobis facere corporis."
      }
   }' --path "Odit aliquam placeat totam quia."
`, os.Args[0])
}

func organismsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organisms delete -path STRING

Delete an Organism
    -path STRING: the path of the org

Example:
    %[1]s organisms delete --path "Harum atque minus."
`, os.Args[0])
}

func organismsDeactivateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organisms deactivate -path STRING

Delete an Organism
    -path STRING: Path

Example:
    %[1]s organisms deactivate --path "/croydon/charity"
`, os.Args[0])
}

func organismsListByPathUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organisms list-by-path -path STRING

List Orgs for a Path
    -path STRING: the path of the Org

Example:
    %[1]s organisms list-by-path --path "Quisquam excepturi vel fugiat ratione."
`, os.Args[0])
}

func organismsListByReferenceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] organisms list-by-reference -path STRING

List Orgs for a Ref
    -path STRING: the path of the Org

Example:
    %[1]s organisms list-by-reference --path "Nihil quia iure."
`, os.Args[0])
}

// poisUsage displays the usage of the pois command and its subcommands.
func poisUsage() {
	fmt.Fprintf(os.Stderr, `Service is the pois service interface.
Usage:
    %[1]s [globalflags] pois COMMAND [flags]

COMMAND:
    post: Add a POI
    show: Show a POI
    list-by-path: List POIs for a path
    list-by-reference: List POIs for a path
    update: Update a POI
    deactivate: Update a POI
    delete: Delete a POI

Additional help:
    %[1]s pois COMMAND --help
`, os.Args[0])
}
func poisPostUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pois post -body JSON -path STRING

Add a POI
    -body JSON: 
    -path STRING: the path of the POI

Example:
    %[1]s pois post --body '{
      "pois": [
         {
            "deactivated": false,
            "description": "Perferendis consequatur et.",
            "geojson": "Voluptates eum enim aut.",
            "geopath": {
               "geopoints": [
                  [
                     0.6467556,
                     0.28522083,
                     0.46987006,
                     0.22842954
                  ],
                  [
                     0.935357,
                     0.68563277
                  ]
               ],
               "id": "59b287534defd02dace3671b",
               "title": "Dolorum qui.",
               "type": "Ea enim sunt animi et."
            },
            "id": "59b287534defd02dace3671b",
            "location": "Placeat maxime sunt perferendis vel sunt.",
            "path": "Ut voluptas.",
            "properties": {
               "Dolores voluptas sunt et quia voluptatem.": "Dolores sed.",
               "Officiis voluptatem corporis voluptatem accusamus dolores.": "Saepe molestias in.",
               "Ut aut dolore qui iste asperiores hic.": "Mollitia nihil cum et voluptate et suscipit."
            },
            "refs": [
               "Aliquid cupiditate.",
               "Nihil sint voluptate incidunt excepturi totam."
            ],
            "title": "Vitae qui in dolorum officiis laborum dolor."
         },
         {
            "deactivated": false,
            "description": "Perferendis consequatur et.",
            "geojson": "Voluptates eum enim aut.",
            "geopath": {
               "geopoints": [
                  [
                     0.6467556,
                     0.28522083,
                     0.46987006,
                     0.22842954
                  ],
                  [
                     0.935357,
                     0.68563277
                  ]
               ],
               "id": "59b287534defd02dace3671b",
               "title": "Dolorum qui.",
               "type": "Ea enim sunt animi et."
            },
            "id": "59b287534defd02dace3671b",
            "location": "Placeat maxime sunt perferendis vel sunt.",
            "path": "Ut voluptas.",
            "properties": {
               "Dolores voluptas sunt et quia voluptatem.": "Dolores sed.",
               "Officiis voluptatem corporis voluptatem accusamus dolores.": "Saepe molestias in.",
               "Ut aut dolore qui iste asperiores hic.": "Mollitia nihil cum et voluptate et suscipit."
            },
            "refs": [
               "Aliquid cupiditate.",
               "Nihil sint voluptate incidunt excepturi totam."
            ],
            "title": "Vitae qui in dolorum officiis laborum dolor."
         },
         {
            "deactivated": false,
            "description": "Perferendis consequatur et.",
            "geojson": "Voluptates eum enim aut.",
            "geopath": {
               "geopoints": [
                  [
                     0.6467556,
                     0.28522083,
                     0.46987006,
                     0.22842954
                  ],
                  [
                     0.935357,
                     0.68563277
                  ]
               ],
               "id": "59b287534defd02dace3671b",
               "title": "Dolorum qui.",
               "type": "Ea enim sunt animi et."
            },
            "id": "59b287534defd02dace3671b",
            "location": "Placeat maxime sunt perferendis vel sunt.",
            "path": "Ut voluptas.",
            "properties": {
               "Dolores voluptas sunt et quia voluptatem.": "Dolores sed.",
               "Officiis voluptatem corporis voluptatem accusamus dolores.": "Saepe molestias in.",
               "Ut aut dolore qui iste asperiores hic.": "Mollitia nihil cum et voluptate et suscipit."
            },
            "refs": [
               "Aliquid cupiditate.",
               "Nihil sint voluptate incidunt excepturi totam."
            ],
            "title": "Vitae qui in dolorum officiis laborum dolor."
         },
         {
            "deactivated": false,
            "description": "Perferendis consequatur et.",
            "geojson": "Voluptates eum enim aut.",
            "geopath": {
               "geopoints": [
                  [
                     0.6467556,
                     0.28522083,
                     0.46987006,
                     0.22842954
                  ],
                  [
                     0.935357,
                     0.68563277
                  ]
               ],
               "id": "59b287534defd02dace3671b",
               "title": "Dolorum qui.",
               "type": "Ea enim sunt animi et."
            },
            "id": "59b287534defd02dace3671b",
            "location": "Placeat maxime sunt perferendis vel sunt.",
            "path": "Ut voluptas.",
            "properties": {
               "Dolores voluptas sunt et quia voluptatem.": "Dolores sed.",
               "Officiis voluptatem corporis voluptatem accusamus dolores.": "Saepe molestias in.",
               "Ut aut dolore qui iste asperiores hic.": "Mollitia nihil cum et voluptate et suscipit."
            },
            "refs": [
               "Aliquid cupiditate.",
               "Nihil sint voluptate incidunt excepturi totam."
            ],
            "title": "Vitae qui in dolorum officiis laborum dolor."
         }
      ]
   }' --path "Odio iure."
`, os.Args[0])
}

func poisShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pois show -path STRING

Show a POI
    -path STRING: the path of the POI

Example:
    %[1]s pois show --path "Nisi neque non nobis et eum."
`, os.Args[0])
}

func poisListByPathUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pois list-by-path -path STRING

List POIs for a path
    -path STRING: the path of the POI

Example:
    %[1]s pois list-by-path --path "Quaerat quisquam ea laboriosam natus ut."
`, os.Args[0])
}

func poisListByReferenceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pois list-by-reference -path STRING

List POIs for a path
    -path STRING: the path of the POI

Example:
    %[1]s pois list-by-reference --path "Eos harum necessitatibus eaque quo ducimus non."
`, os.Args[0])
}

func poisUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pois update -body JSON -path STRING

Update a POI
    -body JSON: 
    -path STRING: the path of the POI

Example:
    %[1]s pois update --body '{
      "poi": {
         "deactivated": false,
         "description": "Perferendis consequatur et.",
         "geojson": "Voluptates eum enim aut.",
         "geopath": {
            "geopoints": [
               [
                  0.6467556,
                  0.28522083,
                  0.46987006,
                  0.22842954
               ],
               [
                  0.935357,
                  0.68563277
               ]
            ],
            "id": "59b287534defd02dace3671b",
            "title": "Dolorum qui.",
            "type": "Ea enim sunt animi et."
         },
         "id": "59b287534defd02dace3671b",
         "location": "Placeat maxime sunt perferendis vel sunt.",
         "path": "Ut voluptas.",
         "properties": {
            "Dolores voluptas sunt et quia voluptatem.": "Dolores sed.",
            "Officiis voluptatem corporis voluptatem accusamus dolores.": "Saepe molestias in.",
            "Ut aut dolore qui iste asperiores hic.": "Mollitia nihil cum et voluptate et suscipit."
         },
         "refs": [
            "Aliquid cupiditate.",
            "Nihil sint voluptate incidunt excepturi totam."
         ],
         "title": "Vitae qui in dolorum officiis laborum dolor."
      }
   }' --path "Est reprehenderit."
`, os.Args[0])
}

func poisDeactivateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pois deactivate -path STRING

Update a POI
    -path STRING: the path of the POI

Example:
    %[1]s pois deactivate --path "Repellat ipsum quaerat qui dolorum quis eum."
`, os.Args[0])
}

func poisDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] pois delete -path STRING

Delete a POI
    -path STRING: the path of the POI

Example:
    %[1]s pois delete --path "Perspiciatis a libero vero aspernatur."
`, os.Args[0])
}

// uploadUsage displays the usage of the upload command and its subcommands.
func uploadUsage() {
	fmt.Fprintf(os.Stderr, `Service is the upload service interface.
Usage:
    %[1]s [globalflags] upload COMMAND [flags]

COMMAND:
    fetch: Import the Google Doc For Generic Upload
    csv: Upload CSV file

Additional help:
    %[1]s upload COMMAND --help
`, os.Args[0])
}
func uploadFetchUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] upload fetch -config-file STRING

Import the Google Doc For Generic Upload
    -config-file STRING: Config file name

Example:
    %[1]s upload fetch --config-file "test.yaml"
`, os.Args[0])
}

func uploadCsvUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] upload csv -config-file STRING -resource STRING

Upload CSV file
    -config-file STRING: Config file name
    -resource STRING: Service we are uploading

Example:
    %[1]s upload csv --config-file "test.yaml" --resource "bizFeed.txt"
`, os.Args[0])
}
