// Code generated by goa v3.5.2, DO NOT EDIT.
//
// upload HTTP server types
//
// Command:
// $ goa gen github.com/derbexuk/wurzel/combiner/server/design

package server

import (
	upload "github.com/derbexuk/wurzel/combiner/server/gen/upload"
	goa "goa.design/goa/v3/pkg"
)

// FetchBadReqResponseBody is the type of the "upload" service "fetch" endpoint
// HTTP response body for the "bad_req" error.
type FetchBadReqResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CsvBadReqResponseBody is the type of the "upload" service "csv" endpoint
// HTTP response body for the "bad_req" error.
type CsvBadReqResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewFetchBadReqResponseBody builds the HTTP response body from the result of
// the "fetch" endpoint of the "upload" service.
func NewFetchBadReqResponseBody(res *goa.ServiceError) *FetchBadReqResponseBody {
	body := &FetchBadReqResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCsvBadReqResponseBody builds the HTTP response body from the result of
// the "csv" endpoint of the "upload" service.
func NewCsvBadReqResponseBody(res *goa.ServiceError) *CsvBadReqResponseBody {
	body := &CsvBadReqResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFetchPayload builds a upload service fetch endpoint payload.
func NewFetchPayload(configFile string) *upload.FetchPayload {
	v := &upload.FetchPayload{}
	v.ConfigFile = &configFile

	return v
}

// NewCsvPayload builds a upload service csv endpoint payload.
func NewCsvPayload(configFile string, resource string) *upload.CsvPayload {
	v := &upload.CsvPayload{}
	v.ConfigFile = &configFile
	v.Resource = &resource

	return v
}
