// Code generated by goa v3.5.2, DO NOT EDIT.
//
// organisms HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/derbexuk/poieventservice/server/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	organisms "github.com/derbexuk/poieventservice/server/gen/organisms"
	organismsviews "github.com/derbexuk/poieventservice/server/gen/organisms/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildPostRequest instantiates a HTTP request object with method and path set
// to call the "organisms" service "post" endpoint
func (c *Client) BuildPostRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*organisms.PostPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organisms", "post", "*organisms.PostPayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PostOrganismsPath(path)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organisms", "post", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePostRequest returns an encoder for requests sent to the organisms post
// server.
func EncodePostRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*organisms.PostPayload)
		if !ok {
			return goahttp.ErrInvalidType("organisms", "post", "*organisms.PostPayload", v)
		}
		body := NewPostRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("organisms", "post", err)
		}
		return nil
	}
}

// DecodePostResponse returns a decoder for responses returned by the organisms
// post endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodePostResponse may return the following errors:
//	- "bad_req" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodePostResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body PostBadReqResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organisms", "post", err)
			}
			err = ValidatePostBadReqResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organisms", "post", err)
			}
			return nil, NewPostBadReq(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organisms", "post", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "organisms" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*organisms.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organisms", "show", "*organisms.ShowPayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowOrganismsPath(path)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organisms", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowResponse returns a decoder for responses returned by the organisms
// show endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeShowResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organisms", "show", err)
			}
			p := NewShowCspaceOrganismOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &organismsviews.CspaceOrganism{Projected: p, View: view}
			if err = organismsviews.ValidateCspaceOrganism(vres); err != nil {
				return nil, goahttp.ErrValidationError("organisms", "show", err)
			}
			res := organisms.NewCspaceOrganism(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organisms", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organisms", "show", err)
			}
			return nil, NewShowNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organisms", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "organisms" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*organisms.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organisms", "update", "*organisms.UpdatePayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateOrganismsPath(path)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organisms", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the organisms
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*organisms.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("organisms", "update", "*organisms.UpdatePayload", v)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("organisms", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// organisms update endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "bad_req" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpdateBadReqResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organisms", "update", err)
			}
			err = ValidateUpdateBadReqResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organisms", "update", err)
			}
			return nil, NewUpdateBadReq(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organisms", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "organisms" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*organisms.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organisms", "delete", "*organisms.DeletePayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteOrganismsPath(path)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organisms", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// organisms delete endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organisms", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organisms", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organisms", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildDeactivateRequest instantiates a HTTP request object with method and
// path set to call the "organisms" service "deactivate" endpoint
func (c *Client) BuildDeactivateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*organisms.DeactivatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organisms", "deactivate", "*organisms.DeactivatePayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeactivateOrganismsPath(path)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organisms", "deactivate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeactivateResponse returns a decoder for responses returned by the
// organisms deactivate endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeactivateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeDeactivateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeactivateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organisms", "deactivate", err)
			}
			err = ValidateDeactivateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organisms", "deactivate", err)
			}
			return nil, NewDeactivateNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organisms", "deactivate", resp.StatusCode, string(body))
		}
	}
}

// BuildListByPathRequest instantiates a HTTP request object with method and
// path set to call the "organisms" service "ListByPath" endpoint
func (c *Client) BuildListByPathRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*organisms.ListByPathPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organisms", "ListByPath", "*organisms.ListByPathPayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListByPathOrganismsPath(path)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organisms", "ListByPath", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListByPathResponse returns a decoder for responses returned by the
// organisms ListByPath endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListByPathResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeListByPathResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListByPathResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organisms", "ListByPath", err)
			}
			p := NewListByPathCspaceOrganismCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := organismsviews.CspaceOrganismCollection{Projected: p, View: view}
			if err = organismsviews.ValidateCspaceOrganismCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("organisms", "ListByPath", err)
			}
			res := organisms.NewCspaceOrganismCollection(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ListByPathNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organisms", "ListByPath", err)
			}
			err = ValidateListByPathNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organisms", "ListByPath", err)
			}
			return nil, NewListByPathNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organisms", "ListByPath", resp.StatusCode, string(body))
		}
	}
}

// BuildListByReferenceRequest instantiates a HTTP request object with method
// and path set to call the "organisms" service "ListByReference" endpoint
func (c *Client) BuildListByReferenceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		path string
	)
	{
		p, ok := v.(*organisms.ListByReferencePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("organisms", "ListByReference", "*organisms.ListByReferencePayload", v)
		}
		path = p.Path
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListByReferenceOrganismsPath(path)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("organisms", "ListByReference", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListByReferenceResponse returns a decoder for responses returned by
// the organisms ListByReference endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeListByReferenceResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeListByReferenceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListByReferenceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organisms", "ListByReference", err)
			}
			p := NewListByReferenceCspaceOrganismCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := organismsviews.CspaceOrganismCollection{Projected: p, View: view}
			if err = organismsviews.ValidateCspaceOrganismCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("organisms", "ListByReference", err)
			}
			res := organisms.NewCspaceOrganismCollection(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ListByReferenceNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("organisms", "ListByReference", err)
			}
			err = ValidateListByReferenceNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("organisms", "ListByReference", err)
			}
			return nil, NewListByReferenceNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("organisms", "ListByReference", resp.StatusCode, string(body))
		}
	}
}

// marshalOrganismsOrganismPayloadToOrganismPayloadRequestBody builds a value
// of type *OrganismPayloadRequestBody from a value of type
// *organisms.OrganismPayload.
func marshalOrganismsOrganismPayloadToOrganismPayloadRequestBody(v *organisms.OrganismPayload) *OrganismPayloadRequestBody {
	if v == nil {
		return nil
	}
	res := &OrganismPayloadRequestBody{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Deactivated: v.Deactivated,
		Path:        v.Path,
	}
	if v.Properties != nil {
		res.Properties = make(map[string]string, len(v.Properties))
		for key, val := range v.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if v.Refs != nil {
		res.Refs = make([]string, len(v.Refs))
		for i, val := range v.Refs {
			res.Refs[i] = val
		}
	}

	return res
}

// marshalOrganismPayloadRequestBodyToOrganismsOrganismPayload builds a value
// of type *organisms.OrganismPayload from a value of type
// *OrganismPayloadRequestBody.
func marshalOrganismPayloadRequestBodyToOrganismsOrganismPayload(v *OrganismPayloadRequestBody) *organisms.OrganismPayload {
	if v == nil {
		return nil
	}
	res := &organisms.OrganismPayload{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Deactivated: v.Deactivated,
		Path:        v.Path,
	}
	if v.Properties != nil {
		res.Properties = make(map[string]string, len(v.Properties))
		for key, val := range v.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if v.Refs != nil {
		res.Refs = make([]string, len(v.Refs))
		for i, val := range v.Refs {
			res.Refs[i] = val
		}
	}

	return res
}

// unmarshalCspaceOrganismResponseToOrganismsviewsCspaceOrganismView builds a
// value of type *organismsviews.CspaceOrganismView from a value of type
// *CspaceOrganismResponse.
func unmarshalCspaceOrganismResponseToOrganismsviewsCspaceOrganismView(v *CspaceOrganismResponse) *organismsviews.CspaceOrganismView {
	res := &organismsviews.CspaceOrganismView{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Deactivated: v.Deactivated,
		Path:        v.Path,
	}
	if v.Properties != nil {
		res.Properties = make(map[string]string, len(v.Properties))
		for key, val := range v.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if v.Refs != nil {
		res.Refs = make([]string, len(v.Refs))
		for i, val := range v.Refs {
			res.Refs[i] = val
		}
	}

	return res
}
