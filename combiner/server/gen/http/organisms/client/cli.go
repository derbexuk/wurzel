// Code generated by goa v3.5.2, DO NOT EDIT.
//
// organisms HTTP client CLI support package
//
// Command:
// $ goa gen github.com/derbexuk/poieventservice/server/design

package client

import (
	"encoding/json"
	"fmt"

	organisms "github.com/derbexuk/poieventservice/server/gen/organisms"
)

// BuildPostPayload builds the payload for the organisms post endpoint from CLI
// flags.
func BuildPostPayload(organismsPostBody string, organismsPostPath string) (*organisms.PostPayload, error) {
	var err error
	var body PostRequestBody
	{
		err = json.Unmarshal([]byte(organismsPostBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"organisms\": [\n         {\n            \"deactivated\": true,\n            \"description\": \"Numquam laboriosam quaerat accusantium.\",\n            \"id\": \"59b287534defd02dace3671b\",\n            \"path\": \"Non dolor animi.\",\n            \"properties\": {\n               \"Ut sed incidunt.\": \"Pariatur deserunt non quisquam dolor.\"\n            },\n            \"refs\": [\n               \"Ea sunt consectetur voluptatem est.\",\n               \"Sed quasi libero excepturi molestiae vel.\"\n            ],\n            \"title\": \"At natus nobis facere corporis.\"\n         },\n         {\n            \"deactivated\": true,\n            \"description\": \"Numquam laboriosam quaerat accusantium.\",\n            \"id\": \"59b287534defd02dace3671b\",\n            \"path\": \"Non dolor animi.\",\n            \"properties\": {\n               \"Ut sed incidunt.\": \"Pariatur deserunt non quisquam dolor.\"\n            },\n            \"refs\": [\n               \"Ea sunt consectetur voluptatem est.\",\n               \"Sed quasi libero excepturi molestiae vel.\"\n            ],\n            \"title\": \"At natus nobis facere corporis.\"\n         },\n         {\n            \"deactivated\": true,\n            \"description\": \"Numquam laboriosam quaerat accusantium.\",\n            \"id\": \"59b287534defd02dace3671b\",\n            \"path\": \"Non dolor animi.\",\n            \"properties\": {\n               \"Ut sed incidunt.\": \"Pariatur deserunt non quisquam dolor.\"\n            },\n            \"refs\": [\n               \"Ea sunt consectetur voluptatem est.\",\n               \"Sed quasi libero excepturi molestiae vel.\"\n            ],\n            \"title\": \"At natus nobis facere corporis.\"\n         },\n         {\n            \"deactivated\": true,\n            \"description\": \"Numquam laboriosam quaerat accusantium.\",\n            \"id\": \"59b287534defd02dace3671b\",\n            \"path\": \"Non dolor animi.\",\n            \"properties\": {\n               \"Ut sed incidunt.\": \"Pariatur deserunt non quisquam dolor.\"\n            },\n            \"refs\": [\n               \"Ea sunt consectetur voluptatem est.\",\n               \"Sed quasi libero excepturi molestiae vel.\"\n            ],\n            \"title\": \"At natus nobis facere corporis.\"\n         }\n      ]\n   }'")
		}
	}
	var path string
	{
		path = organismsPostPath
	}
	v := &organisms.PostPayload{}
	if body.Organisms != nil {
		v.Organisms = make([]*organisms.OrganismPayload, len(body.Organisms))
		for i, val := range body.Organisms {
			v.Organisms[i] = marshalOrganismPayloadRequestBodyToOrganismsOrganismPayload(val)
		}
	}
	v.Path = path

	return v, nil
}

// BuildShowPayload builds the payload for the organisms show endpoint from CLI
// flags.
func BuildShowPayload(organismsShowPath string) (*organisms.ShowPayload, error) {
	var path string
	{
		path = organismsShowPath
	}
	v := &organisms.ShowPayload{}
	v.Path = path

	return v, nil
}

// BuildUpdatePayload builds the payload for the organisms update endpoint from
// CLI flags.
func BuildUpdatePayload(organismsUpdateBody string, organismsUpdatePath string) (*organisms.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(organismsUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"organism\": {\n         \"deactivated\": true,\n         \"description\": \"Numquam laboriosam quaerat accusantium.\",\n         \"id\": \"59b287534defd02dace3671b\",\n         \"path\": \"Non dolor animi.\",\n         \"properties\": {\n            \"Ut sed incidunt.\": \"Pariatur deserunt non quisquam dolor.\"\n         },\n         \"refs\": [\n            \"Ea sunt consectetur voluptatem est.\",\n            \"Sed quasi libero excepturi molestiae vel.\"\n         ],\n         \"title\": \"At natus nobis facere corporis.\"\n      }\n   }'")
		}
	}
	var path string
	{
		path = organismsUpdatePath
	}
	v := &organisms.UpdatePayload{}
	if body.Organism != nil {
		v.Organism = marshalOrganismPayloadRequestBodyToOrganismsOrganismPayload(body.Organism)
	}
	v.Path = path

	return v, nil
}

// BuildDeletePayload builds the payload for the organisms delete endpoint from
// CLI flags.
func BuildDeletePayload(organismsDeletePath string) (*organisms.DeletePayload, error) {
	var path string
	{
		path = organismsDeletePath
	}
	v := &organisms.DeletePayload{}
	v.Path = path

	return v, nil
}

// BuildDeactivatePayload builds the payload for the organisms deactivate
// endpoint from CLI flags.
func BuildDeactivatePayload(organismsDeactivatePath string) (*organisms.DeactivatePayload, error) {
	var path string
	{
		path = organismsDeactivatePath
	}
	v := &organisms.DeactivatePayload{}
	v.Path = path

	return v, nil
}

// BuildListByPathPayload builds the payload for the organisms ListByPath
// endpoint from CLI flags.
func BuildListByPathPayload(organismsListByPathPath string) (*organisms.ListByPathPayload, error) {
	var path string
	{
		path = organismsListByPathPath
	}
	v := &organisms.ListByPathPayload{}
	v.Path = path

	return v, nil
}

// BuildListByReferencePayload builds the payload for the organisms
// ListByReference endpoint from CLI flags.
func BuildListByReferencePayload(organismsListByReferencePath string) (*organisms.ListByReferencePayload, error) {
	var path string
	{
		path = organismsListByReferencePath
	}
	v := &organisms.ListByReferencePayload{}
	v.Path = path

	return v, nil
}
