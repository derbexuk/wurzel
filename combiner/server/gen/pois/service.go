// Code generated by goa v3.5.2, DO NOT EDIT.
//
// pois service
//
// Command:
// $ goa gen github.com/derbexuk/poieventservice/server/design

package pois

import (
	"context"

	poisviews "github.com/derbexuk/poieventservice/server/gen/pois/views"
	goa "goa.design/goa/v3/pkg"
)

// Service is the pois service interface.
type Service interface {
	// Add a POI
	Post(context.Context, *PostPayload) (err error)
	// Show a POI
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "summary"
	Show(context.Context, *ShowPayload) (res *CspacePoi, view string, err error)
	// List POIs for a path
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "summary"
	ListByPath(context.Context, *ListByPathPayload) (res CspacePoiCollection, view string, err error)
	// List POIs for a path
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "summary"
	ListByReference(context.Context, *ListByReferencePayload) (res CspacePoiCollection, view string, err error)
	// Update a POI
	Update(context.Context, *UpdatePayload) (err error)
	// Update a POI
	Deactivate(context.Context, *DeactivatePayload) (err error)
	// Delete a POI
	Delete(context.Context, *DeletePayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "pois"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"post", "show", "ListByPath", "ListByReference", "update", "deactivate", "delete"}

// PostPayload is the payload type of the pois service post method.
type PostPayload struct {
	// the path of the POI
	Path string
	Pois []*PoiPayload
}

// ShowPayload is the payload type of the pois service show method.
type ShowPayload struct {
	// the path of the POI
	Path string
}

// CspacePoi is the result type of the pois service show method.
type CspacePoi struct {
	// ID of poi
	ID string
	// Poi title/name
	Title       string
	Description *string
	Deactivated *bool
	// name of location
	Location *string
	Geojson  string
	// Hash of application specific properties
	Properties map[string]string
	// refs
	Refs []string
	Path *string
}

// ListByPathPayload is the payload type of the pois service ListByPath method.
type ListByPathPayload struct {
	// the path of the POI
	Path string
}

// CspacePoiCollection is the result type of the pois service ListByPath method.
type CspacePoiCollection []*CspacePoi

// ListByReferencePayload is the payload type of the pois service
// ListByReference method.
type ListByReferencePayload struct {
	// the path of the POI
	Path string
}

// UpdatePayload is the payload type of the pois service update method.
type UpdatePayload struct {
	// the path of the POI
	Path string
	Poi  *PoiPayload
}

// DeactivatePayload is the payload type of the pois service deactivate method.
type DeactivatePayload struct {
	// the path of the POI
	Path string
}

// DeletePayload is the payload type of the pois service delete method.
type DeletePayload struct {
	// the path of the POI
	Path string
}

type PoiPayload struct {
	// ID of poi
	ID string
	// Poi title/name
	Title       string
	Description *string
	Deactivated *bool
	// name of location
	Location *string
	Geopath  *GeoPath
	Geojson  string
	// Hash of application specific properties
	Properties map[string]string
	// references
	Refs []string
	Path *string
}

type GeoPath struct {
	ID *string
	// Path title/name
	Title *string
	// must be route | point | area
	Type *string
	// path
	Geopoints [][]float32
}

// MakeBadReq builds a goa.ServiceError from an error.
func MakeBadReq(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_req",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnAuth builds a goa.ServiceError from an error.
func MakeUnAuth(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "un_auth",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
		Fault:   true,
	}
}

// NewCspacePoi initializes result type CspacePoi from viewed result type
// CspacePoi.
func NewCspacePoi(vres *poisviews.CspacePoi) *CspacePoi {
	var res *CspacePoi
	switch vres.View {
	case "default", "":
		res = newCspacePoi(vres.Projected)
	case "summary":
		res = newCspacePoiSummary(vres.Projected)
	}
	return res
}

// NewViewedCspacePoi initializes viewed result type CspacePoi from result type
// CspacePoi using the given view.
func NewViewedCspacePoi(res *CspacePoi, view string) *poisviews.CspacePoi {
	var vres *poisviews.CspacePoi
	switch view {
	case "default", "":
		p := newCspacePoiView(res)
		vres = &poisviews.CspacePoi{Projected: p, View: "default"}
	case "summary":
		p := newCspacePoiViewSummary(res)
		vres = &poisviews.CspacePoi{Projected: p, View: "summary"}
	}
	return vres
}

// NewCspacePoiCollection initializes result type CspacePoiCollection from
// viewed result type CspacePoiCollection.
func NewCspacePoiCollection(vres poisviews.CspacePoiCollection) CspacePoiCollection {
	var res CspacePoiCollection
	switch vres.View {
	case "default", "":
		res = newCspacePoiCollection(vres.Projected)
	case "summary":
		res = newCspacePoiCollectionSummary(vres.Projected)
	}
	return res
}

// NewViewedCspacePoiCollection initializes viewed result type
// CspacePoiCollection from result type CspacePoiCollection using the given
// view.
func NewViewedCspacePoiCollection(res CspacePoiCollection, view string) poisviews.CspacePoiCollection {
	var vres poisviews.CspacePoiCollection
	switch view {
	case "default", "":
		p := newCspacePoiCollectionView(res)
		vres = poisviews.CspacePoiCollection{Projected: p, View: "default"}
	case "summary":
		p := newCspacePoiCollectionViewSummary(res)
		vres = poisviews.CspacePoiCollection{Projected: p, View: "summary"}
	}
	return vres
}

// newCspacePoi converts projected type CspacePoi to service type CspacePoi.
func newCspacePoi(vres *poisviews.CspacePoiView) *CspacePoi {
	res := &CspacePoi{
		Description: vres.Description,
		Deactivated: vres.Deactivated,
		Location:    vres.Location,
		Path:        vres.Path,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Geojson != nil {
		res.Geojson = *vres.Geojson
	}
	if vres.Properties != nil {
		res.Properties = make(map[string]string, len(vres.Properties))
		for key, val := range vres.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if vres.Refs != nil {
		res.Refs = make([]string, len(vres.Refs))
		for i, val := range vres.Refs {
			res.Refs[i] = val
		}
	}
	return res
}

// newCspacePoiSummary converts projected type CspacePoi to service type
// CspacePoi.
func newCspacePoiSummary(vres *poisviews.CspacePoiView) *CspacePoi {
	res := &CspacePoi{
		Path: vres.Path,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Geojson != nil {
		res.Geojson = *vres.Geojson
	}
	return res
}

// newCspacePoiView projects result type CspacePoi to projected type
// CspacePoiView using the "default" view.
func newCspacePoiView(res *CspacePoi) *poisviews.CspacePoiView {
	vres := &poisviews.CspacePoiView{
		ID:          &res.ID,
		Title:       &res.Title,
		Description: res.Description,
		Deactivated: res.Deactivated,
		Location:    res.Location,
		Geojson:     &res.Geojson,
		Path:        res.Path,
	}
	if res.Properties != nil {
		vres.Properties = make(map[string]string, len(res.Properties))
		for key, val := range res.Properties {
			tk := key
			tv := val
			vres.Properties[tk] = tv
		}
	}
	if res.Refs != nil {
		vres.Refs = make([]string, len(res.Refs))
		for i, val := range res.Refs {
			vres.Refs[i] = val
		}
	}
	return vres
}

// newCspacePoiViewSummary projects result type CspacePoi to projected type
// CspacePoiView using the "summary" view.
func newCspacePoiViewSummary(res *CspacePoi) *poisviews.CspacePoiView {
	vres := &poisviews.CspacePoiView{
		ID:      &res.ID,
		Title:   &res.Title,
		Geojson: &res.Geojson,
		Path:    res.Path,
	}
	return vres
}

// newCspacePoiCollection converts projected type CspacePoiCollection to
// service type CspacePoiCollection.
func newCspacePoiCollection(vres poisviews.CspacePoiCollectionView) CspacePoiCollection {
	res := make(CspacePoiCollection, len(vres))
	for i, n := range vres {
		res[i] = newCspacePoi(n)
	}
	return res
}

// newCspacePoiCollectionSummary converts projected type CspacePoiCollection to
// service type CspacePoiCollection.
func newCspacePoiCollectionSummary(vres poisviews.CspacePoiCollectionView) CspacePoiCollection {
	res := make(CspacePoiCollection, len(vres))
	for i, n := range vres {
		res[i] = newCspacePoiSummary(n)
	}
	return res
}

// newCspacePoiCollectionView projects result type CspacePoiCollection to
// projected type CspacePoiCollectionView using the "default" view.
func newCspacePoiCollectionView(res CspacePoiCollection) poisviews.CspacePoiCollectionView {
	vres := make(poisviews.CspacePoiCollectionView, len(res))
	for i, n := range res {
		vres[i] = newCspacePoiView(n)
	}
	return vres
}

// newCspacePoiCollectionViewSummary projects result type CspacePoiCollection
// to projected type CspacePoiCollectionView using the "summary" view.
func newCspacePoiCollectionViewSummary(res CspacePoiCollection) poisviews.CspacePoiCollectionView {
	vres := make(poisviews.CspacePoiCollectionView, len(res))
	for i, n := range res {
		vres[i] = newCspacePoiViewSummary(n)
	}
	return vres
}
