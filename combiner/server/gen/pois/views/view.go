// Code generated by goa v3.5.2, DO NOT EDIT.
//
// pois views
//
// Command:
// $ goa gen github.com/derbexuk/wurzel/combiner/server/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// CspacePoi is the viewed result type that is projected based on a view.
type CspacePoi struct {
	// Type to project
	Projected *CspacePoiView
	// View to render
	View string
}

// CspacePoiCollection is the viewed result type that is projected based on a
// view.
type CspacePoiCollection struct {
	// Type to project
	Projected CspacePoiCollectionView
	// View to render
	View string
}

// CspacePoiView is a type that runs validations on a projected type.
type CspacePoiView struct {
	// ID of poi
	ID *string
	// Poi title/name
	Title       *string
	Description *string
	Deactivated *bool
	// name of location
	Location *string
	Geojson  *string
	// Hash of application specific properties
	Properties map[string]string
	// refs
	Refs []string
	Path *string
}

// CspacePoiCollectionView is a type that runs validations on a projected type.
type CspacePoiCollectionView []*CspacePoiView

var (
	// CspacePoiMap is a map indexing the attribute names of CspacePoi by view name.
	CspacePoiMap = map[string][]string{
		"default": {
			"id",
			"title",
			"description",
			"deactivated",
			"location",
			"geojson",
			"properties",
			"refs",
			"path",
		},
		"summary": {
			"id",
			"title",
			"geojson",
			"path",
		},
	}
	// CspacePoiCollectionMap is a map indexing the attribute names of
	// CspacePoiCollection by view name.
	CspacePoiCollectionMap = map[string][]string{
		"default": {
			"id",
			"title",
			"description",
			"deactivated",
			"location",
			"geojson",
			"properties",
			"refs",
			"path",
		},
		"summary": {
			"id",
			"title",
			"geojson",
			"path",
		},
	}
)

// ValidateCspacePoi runs the validations defined on the viewed result type
// CspacePoi.
func ValidateCspacePoi(result *CspacePoi) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCspacePoiView(result.Projected)
	case "summary":
		err = ValidateCspacePoiViewSummary(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "summary"})
	}
	return
}

// ValidateCspacePoiCollection runs the validations defined on the viewed
// result type CspacePoiCollection.
func ValidateCspacePoiCollection(result CspacePoiCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCspacePoiCollectionView(result.Projected)
	case "summary":
		err = ValidateCspacePoiCollectionViewSummary(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "summary"})
	}
	return
}

// ValidateCspacePoiView runs the validations defined on CspacePoiView using
// the "default" view.
func ValidateCspacePoiView(result *CspacePoiView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Geojson == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("geojson", "result"))
	}
	return
}

// ValidateCspacePoiViewSummary runs the validations defined on CspacePoiView
// using the "summary" view.
func ValidateCspacePoiViewSummary(result *CspacePoiView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Geojson == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("geojson", "result"))
	}
	return
}

// ValidateCspacePoiCollectionView runs the validations defined on
// CspacePoiCollectionView using the "default" view.
func ValidateCspacePoiCollectionView(result CspacePoiCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCspacePoiView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCspacePoiCollectionViewSummary runs the validations defined on
// CspacePoiCollectionView using the "summary" view.
func ValidateCspacePoiCollectionViewSummary(result CspacePoiCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCspacePoiViewSummary(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
