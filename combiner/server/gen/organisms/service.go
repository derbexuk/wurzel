// Code generated by goa v3.5.2, DO NOT EDIT.
//
// organisms service
//
// Command:
// $ goa gen github.com/derbexuk/poieventservice/server/design

package organisms

import (
	"context"

	organismsviews "github.com/derbexuk/poieventservice/server/gen/organisms/views"
	goa "goa.design/goa/v3/pkg"
)

// Service is the organisms service interface.
type Service interface {
	// Add an organism
	Post(context.Context, *PostPayload) (err error)
	// Show an organism in full
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "summary"
	Show(context.Context, *ShowPayload) (res *CspaceOrganism, view string, err error)
	// Update an organism
	Update(context.Context, *UpdatePayload) (err error)
	// Delete an Organism
	Delete(context.Context, *DeletePayload) (err error)
	// Delete an Organism
	Deactivate(context.Context, *DeactivatePayload) (err error)
	// List Orgs for a Path
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "summary"
	ListByPath(context.Context, *ListByPathPayload) (res CspaceOrganismCollection, view string, err error)
	// List Orgs for a Ref
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "summary"
	ListByReference(context.Context, *ListByReferencePayload) (res CspaceOrganismCollection, view string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "organisms"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"post", "show", "update", "delete", "deactivate", "ListByPath", "ListByReference"}

// PostPayload is the payload type of the organisms service post method.
type PostPayload struct {
	// the path of the org
	Path      string
	Organisms []*OrganismPayload
}

// ShowPayload is the payload type of the organisms service show method.
type ShowPayload struct {
	// the path of the org
	Path string
}

// CspaceOrganism is the result type of the organisms service show method.
type CspaceOrganism struct {
	// ID of Organism
	ID string
	// Organism title
	Title       string
	Description *string
	Deactivated *bool
	// Hash of application specific properties
	Properties map[string]string
	// refs
	Refs []string
	Path *string
}

// UpdatePayload is the payload type of the organisms service update method.
type UpdatePayload struct {
	// the path of the org
	Path     string
	Organism *OrganismPayload
}

// DeletePayload is the payload type of the organisms service delete method.
type DeletePayload struct {
	// the path of the org
	Path string
}

// DeactivatePayload is the payload type of the organisms service deactivate
// method.
type DeactivatePayload struct {
	// Path
	Path string
}

// ListByPathPayload is the payload type of the organisms service ListByPath
// method.
type ListByPathPayload struct {
	// the path of the Org
	Path string
}

// CspaceOrganismCollection is the result type of the organisms service
// ListByPath method.
type CspaceOrganismCollection []*CspaceOrganism

// ListByReferencePayload is the payload type of the organisms service
// ListByReference method.
type ListByReferencePayload struct {
	// the path of the Org
	Path string
}

type OrganismPayload struct {
	// ID of Organism
	ID string
	// Organism title
	Title       string
	Description *string
	Deactivated *bool
	// Hash of application specific properties
	Properties map[string]string
	// references
	Refs []string
	Path *string
}

// MakeBadReq builds a goa.ServiceError from an error.
func MakeBadReq(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_req",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnAuth builds a goa.ServiceError from an error.
func MakeUnAuth(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "un_auth",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
		Fault:   true,
	}
}

// NewCspaceOrganism initializes result type CspaceOrganism from viewed result
// type CspaceOrganism.
func NewCspaceOrganism(vres *organismsviews.CspaceOrganism) *CspaceOrganism {
	var res *CspaceOrganism
	switch vres.View {
	case "default", "":
		res = newCspaceOrganism(vres.Projected)
	case "summary":
		res = newCspaceOrganismSummary(vres.Projected)
	}
	return res
}

// NewViewedCspaceOrganism initializes viewed result type CspaceOrganism from
// result type CspaceOrganism using the given view.
func NewViewedCspaceOrganism(res *CspaceOrganism, view string) *organismsviews.CspaceOrganism {
	var vres *organismsviews.CspaceOrganism
	switch view {
	case "default", "":
		p := newCspaceOrganismView(res)
		vres = &organismsviews.CspaceOrganism{Projected: p, View: "default"}
	case "summary":
		p := newCspaceOrganismViewSummary(res)
		vres = &organismsviews.CspaceOrganism{Projected: p, View: "summary"}
	}
	return vres
}

// NewCspaceOrganismCollection initializes result type CspaceOrganismCollection
// from viewed result type CspaceOrganismCollection.
func NewCspaceOrganismCollection(vres organismsviews.CspaceOrganismCollection) CspaceOrganismCollection {
	var res CspaceOrganismCollection
	switch vres.View {
	case "default", "":
		res = newCspaceOrganismCollection(vres.Projected)
	case "summary":
		res = newCspaceOrganismCollectionSummary(vres.Projected)
	}
	return res
}

// NewViewedCspaceOrganismCollection initializes viewed result type
// CspaceOrganismCollection from result type CspaceOrganismCollection using the
// given view.
func NewViewedCspaceOrganismCollection(res CspaceOrganismCollection, view string) organismsviews.CspaceOrganismCollection {
	var vres organismsviews.CspaceOrganismCollection
	switch view {
	case "default", "":
		p := newCspaceOrganismCollectionView(res)
		vres = organismsviews.CspaceOrganismCollection{Projected: p, View: "default"}
	case "summary":
		p := newCspaceOrganismCollectionViewSummary(res)
		vres = organismsviews.CspaceOrganismCollection{Projected: p, View: "summary"}
	}
	return vres
}

// newCspaceOrganism converts projected type CspaceOrganism to service type
// CspaceOrganism.
func newCspaceOrganism(vres *organismsviews.CspaceOrganismView) *CspaceOrganism {
	res := &CspaceOrganism{
		Description: vres.Description,
		Deactivated: vres.Deactivated,
		Path:        vres.Path,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Properties != nil {
		res.Properties = make(map[string]string, len(vres.Properties))
		for key, val := range vres.Properties {
			tk := key
			tv := val
			res.Properties[tk] = tv
		}
	}
	if vres.Refs != nil {
		res.Refs = make([]string, len(vres.Refs))
		for i, val := range vres.Refs {
			res.Refs[i] = val
		}
	}
	return res
}

// newCspaceOrganismSummary converts projected type CspaceOrganism to service
// type CspaceOrganism.
func newCspaceOrganismSummary(vres *organismsviews.CspaceOrganismView) *CspaceOrganism {
	res := &CspaceOrganism{
		Path: vres.Path,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	return res
}

// newCspaceOrganismView projects result type CspaceOrganism to projected type
// CspaceOrganismView using the "default" view.
func newCspaceOrganismView(res *CspaceOrganism) *organismsviews.CspaceOrganismView {
	vres := &organismsviews.CspaceOrganismView{
		ID:          &res.ID,
		Title:       &res.Title,
		Description: res.Description,
		Deactivated: res.Deactivated,
		Path:        res.Path,
	}
	if res.Properties != nil {
		vres.Properties = make(map[string]string, len(res.Properties))
		for key, val := range res.Properties {
			tk := key
			tv := val
			vres.Properties[tk] = tv
		}
	}
	if res.Refs != nil {
		vres.Refs = make([]string, len(res.Refs))
		for i, val := range res.Refs {
			vres.Refs[i] = val
		}
	}
	return vres
}

// newCspaceOrganismViewSummary projects result type CspaceOrganism to
// projected type CspaceOrganismView using the "summary" view.
func newCspaceOrganismViewSummary(res *CspaceOrganism) *organismsviews.CspaceOrganismView {
	vres := &organismsviews.CspaceOrganismView{
		ID:    &res.ID,
		Title: &res.Title,
		Path:  res.Path,
	}
	return vres
}

// newCspaceOrganismCollection converts projected type CspaceOrganismCollection
// to service type CspaceOrganismCollection.
func newCspaceOrganismCollection(vres organismsviews.CspaceOrganismCollectionView) CspaceOrganismCollection {
	res := make(CspaceOrganismCollection, len(vres))
	for i, n := range vres {
		res[i] = newCspaceOrganism(n)
	}
	return res
}

// newCspaceOrganismCollectionSummary converts projected type
// CspaceOrganismCollection to service type CspaceOrganismCollection.
func newCspaceOrganismCollectionSummary(vres organismsviews.CspaceOrganismCollectionView) CspaceOrganismCollection {
	res := make(CspaceOrganismCollection, len(vres))
	for i, n := range vres {
		res[i] = newCspaceOrganismSummary(n)
	}
	return res
}

// newCspaceOrganismCollectionView projects result type
// CspaceOrganismCollection to projected type CspaceOrganismCollectionView
// using the "default" view.
func newCspaceOrganismCollectionView(res CspaceOrganismCollection) organismsviews.CspaceOrganismCollectionView {
	vres := make(organismsviews.CspaceOrganismCollectionView, len(res))
	for i, n := range res {
		vres[i] = newCspaceOrganismView(n)
	}
	return vres
}

// newCspaceOrganismCollectionViewSummary projects result type
// CspaceOrganismCollection to projected type CspaceOrganismCollectionView
// using the "summary" view.
func newCspaceOrganismCollectionViewSummary(res CspaceOrganismCollection) organismsviews.CspaceOrganismCollectionView {
	vres := make(organismsviews.CspaceOrganismCollectionView, len(res))
	for i, n := range res {
		vres[i] = newCspaceOrganismViewSummary(n)
	}
	return vres
}
