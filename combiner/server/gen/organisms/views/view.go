// Code generated by goa v3.5.2, DO NOT EDIT.
//
// organisms views
//
// Command:
// $ goa gen github.com/derbexuk/poieventservice/server/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// CspaceOrganism is the viewed result type that is projected based on a view.
type CspaceOrganism struct {
	// Type to project
	Projected *CspaceOrganismView
	// View to render
	View string
}

// CspaceOrganismCollection is the viewed result type that is projected based
// on a view.
type CspaceOrganismCollection struct {
	// Type to project
	Projected CspaceOrganismCollectionView
	// View to render
	View string
}

// CspaceOrganismView is a type that runs validations on a projected type.
type CspaceOrganismView struct {
	// ID of Organism
	ID *string
	// Organism title
	Title       *string
	Description *string
	Deactivated *bool
	// Hash of application specific properties
	Properties map[string]string
	// refs
	Refs []string
	Path *string
}

// CspaceOrganismCollectionView is a type that runs validations on a projected
// type.
type CspaceOrganismCollectionView []*CspaceOrganismView

var (
	// CspaceOrganismMap is a map indexing the attribute names of CspaceOrganism by
	// view name.
	CspaceOrganismMap = map[string][]string{
		"default": {
			"id",
			"title",
			"description",
			"deactivated",
			"properties",
			"refs",
			"path",
		},
		"summary": {
			"id",
			"title",
			"path",
		},
	}
	// CspaceOrganismCollectionMap is a map indexing the attribute names of
	// CspaceOrganismCollection by view name.
	CspaceOrganismCollectionMap = map[string][]string{
		"default": {
			"id",
			"title",
			"description",
			"deactivated",
			"properties",
			"refs",
			"path",
		},
		"summary": {
			"id",
			"title",
			"path",
		},
	}
)

// ValidateCspaceOrganism runs the validations defined on the viewed result
// type CspaceOrganism.
func ValidateCspaceOrganism(result *CspaceOrganism) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCspaceOrganismView(result.Projected)
	case "summary":
		err = ValidateCspaceOrganismViewSummary(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "summary"})
	}
	return
}

// ValidateCspaceOrganismCollection runs the validations defined on the viewed
// result type CspaceOrganismCollection.
func ValidateCspaceOrganismCollection(result CspaceOrganismCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCspaceOrganismCollectionView(result.Projected)
	case "summary":
		err = ValidateCspaceOrganismCollectionViewSummary(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "summary"})
	}
	return
}

// ValidateCspaceOrganismView runs the validations defined on
// CspaceOrganismView using the "default" view.
func ValidateCspaceOrganismView(result *CspaceOrganismView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	return
}

// ValidateCspaceOrganismViewSummary runs the validations defined on
// CspaceOrganismView using the "summary" view.
func ValidateCspaceOrganismViewSummary(result *CspaceOrganismView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	return
}

// ValidateCspaceOrganismCollectionView runs the validations defined on
// CspaceOrganismCollectionView using the "default" view.
func ValidateCspaceOrganismCollectionView(result CspaceOrganismCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCspaceOrganismView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCspaceOrganismCollectionViewSummary runs the validations defined on
// CspaceOrganismCollectionView using the "summary" view.
func ValidateCspaceOrganismCollectionViewSummary(result CspaceOrganismCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCspaceOrganismViewSummary(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
